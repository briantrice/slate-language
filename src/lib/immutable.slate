x@(Root traits) immutablySettingSlots: slotArray to: valueArray
"TODO: optimize this somehow to avoid the wasteful clone?"
[
  x isImmutable
    ifTrue: [x cloneSettingSlots: slotArray to: valueArray]
    ifFalse: [x immutably cloneSettingSlots: slotArray to: valueArray]
].

x@(Root traits) isFrozen
"Whether the object and all its slot values recursively are immutable."
[
  x isImmutable /\
   [x allSlotsDo: [| :obj | obj isImmutable ifFalse: [^ False]. True]]
].

"TODO: figure out a more systematic way to handle has-no-slots-and-never-will."
x@(Oddball traits) immutably [x].
x@(Oddball traits) freeze [x].
x@(SmallInteger traits) isImmutable [True].
x@(SmallInteger traits) isFrozen [True].

x@(Root traits) freeze &seen
"Make a frozen variant of the existing object, meaning an immutable version of
the object with frozen variants of its slot values (and so it must recurse)."
[
  seen `defaultsTo: IdentityDictionary new.
  x isFrozen \/ [x restrictsDelegation]
    ifTrue: [x]
    ifFalse: [seen at: x ifAbsentPut:
      [x immutablySettingSlots: x slotNames to:
    (x slotValues collect: [| :obj | obj freeze &seen: seen])]]
].
