collections define: #CharacterCollection
        &parents: {ExtensibleCollection. Mapping}
            &slots: {#contents -> (ByteArray newSize: 256)}.
"A fast implementation of a collection of Characters. It is similar to the
Bag implementation, but using a ByteArray to map from character codes to
counts. Obviously this is only good for counts under 255."

c1@(CharacterCollection traits) = c2@(CharacterCollection traits)
[c1 contents = c2 contents].

c@(CharacterCollection traits) hash
[c contents hash].

_@(CharacterCollection traits) accepts: _@(ASCIIString Character traits)
[True].

_@(CharacterCollection traits) accepts: _@(Root traits)
[False].

c@(CharacterCollection traits) elementType
[ASCIIString Character].

c@(CharacterCollection traits) new
[c clone `setting: #{#contents}
   to: {c contents newSizeOf: c elementType codeRange}].

c@(CharacterCollection traits) add: ch
[| index |
  index := ch code.
  c contents at: index put: (c contents at: index) + 1.
  ch
].

c@(CharacterCollection traits) remove: ch
[| index |
  index := ch code.
  c contents at: index put: (c contents at: index) - 1.
  ch
].

c@(CharacterCollection traits) removeEvery: ch
[| index |
  index := ch code.
  c contents at: index put: 0.
  ch
].

c@(CharacterCollection traits) include: ch
[
  c contents at: ch code put: 1.
  ch
].

c@(CharacterCollection traits) includes: ch
[
  (c contents at: ch code) > 0
].

c@(CharacterCollection traits) do: block
[
  c elementType codeRange
    do: [| :code | (c contents at: code) > 0
        ifTrue: [block applyWith: (code as: c elementType)]].
].

c@(CharacterCollection traits) at: ch
"Allows treating it as a Mapping."
[
  c contents at: ch code
].

c@(CharacterCollection traits) at: ch put: n
"Allows treating it as a Mapping."
[
  c contents at: ch code put: n
].

c@(CharacterCollection traits) as: s@(String traits)
[| newS index |
  newS := (s newSizeOf: c).
  index := 0.
  c contents doWithIndex:
    [| :code :count |
     count = 0 ifFalse:
       [count = 1
      ifTrue: [newS at: index put: code]
      ifFalse: [newS].
    index += count]].
  newS
].

c@(CharacterCollection traits) complement
"Return the Set-wise complement of the collection's characters."
[| result |
  result := c new.
  result contents
    do: [| :code |
     (c contents at: code) = 0 ifFalse: [result contents at: code put: 1]].
  result
].
