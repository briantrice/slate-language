prototypes define: #Segment
    &slots:
      {#root. "The root object to trace from."
       #imports -> ExtensibleArray new. "The symbol table for the output."
       #relocations -> ExtensibleArray new. "The relocations for the output."
       #output -> ExtensibleArray new. "The output representations."
       #objects -> IdentityDictionary new. "Maps from object to it's particular represenation."}.
"A Segment builds up a definition of a group of objects that can be extracted
and serialized in binary form and then reloaded using a group of linking
tables."

Segment traits define: #Representation
"Object representation in the Segment's output."
  &slots:
    {#offset -> 0. "The allocated offset for the representation in the output."}.

Segment traits define: #Object &parents: {Segment Representation}
  &slots: {#map "The map which defines the structure.".
       #slotValues -> ExtensibleArray new "The values of various slots in the object."}.

rep@(Segment Object traits) new
[rep clone `>> [slotValues := rep slotValues new. ]].

rep@(Segment Object traits) newFrom: obj
[rep new `>> [slotValues addAllLast: obj slotValues. ]].

Segment traits define: #Array &parents: {Segment Object}
  &slots: {#elements -> ExtensibleArray new}.

a@(Segment Array traits) new
[resend `>> [elements := a elements new. ]].

a@(Segment Array traits) newFrom: obj
[resend `>> [elements addAllLast: obj. ]].

Segment traits define: #ByteArray &parents: {Segment Array}.

Segment traits define: #Method &parents: {Segment Representation}
  &slots: {#roles -> {} "Roles is a collection containing, for each argument position, an array of the objects upon which a role must be defined."}.

Segment Method traits define: #Primitive &parents: {Segment Method}
  &slots: {#index "The index in the primitive table of the repspective primitive"}.

rep@(Segment Method Primitive traits) newFrom: obj
[rep clone `>> [selector := obj selector. index := obj index. ]].

Segment Method traits define: #Compiled &parents: {Segment Method}
  &slots: {#sourceCode "The source code which generated the particular compiled method."}.

rep@(Segment Method Compiled traits) newFrom: obj
[
  rep clone `>>
    [selector := obj selector.
     roles := ((0 below: obj arity) collect: [| :_ | ExtensibleArray new]). ]
].

"TODO: Handle Closure objects."

Segment traits define: #Map &parents: {Segment Representation}
  &slots: {#delegates -> ExtensibleArray new.
           #slots -> {}}.

rep@(Segment Map traits) new
[resend `>> [delegates := rep delegates new. slots := rep slots new. ]].

rep@(Segment Map traits) newFrom: obj
[
  rep new `>>
   [| :newRep |
    (obj delegateNames with: obj delegates do:
      [| :slot :val | newRep delegates addLast: slot -> val]).
    rep slots := (Array newSize: obj slotCount).
    0 below: obj slotTable size by: 2 do:
      [| :index |
       (obj slotTable at: index)
         ifNotNilDo:
           [| :name offset |
            offset := (obj slotTable at: index + 1) >> 2 - 2.
            newRep slots at: offset put: name]]. ]
].

Segment traits define: #Import.
"Imported values that must be evaluted when the image segment is loaded."
[| :sym | Segment traits define: sym &parents: {Segment Import}]
  for: #{#Path. #Symbol}.

Segment traits define: #Relocation
"Relocation against Imports"
    &slots:
      {#import. "The imported value this relocation takes as its value."
       #object. "The object being relocated against."
       #slot "The slot whose value needs to be relocated."}.

s@(Segment traits) newOn: root
[
  s clone `>>
    [root := root.
     imports := s imports new.
     relocations := s relocations new.
     output := s output new.
     objects := s objects new. ]
].

s@(Segment traits) represents: obj
"Whether the Segment has recorded a representation for the particular object."
[s objects includesKey: obj].

s@(Segment traits) represent: obj as: rep
"Ensures that the Segment has a representation of the object made from the given
prototype."
[s objects at: obj ifAbsentPut: [rep newFrom: obj]].

s@(Segment traits) trace: obj@(Root traits)
"By default, trace objects as any standard thing with named slots, and then
trace their map."
[
  s represent: obj as: s Object.
  s trace: obj _map.
].

s@(Segment traits) trace: obj@(Array traits)
[
  s represent: obj as: s Array.
  s trace: obj _map.
].

s@(Segment traits) trace: obj@(ByteArray traits)
[
  s represent: obj as: s ByteArray.
  s trace: obj _map.
].

s@(Segment traits) trace: obj@(Map traits)
[
  s represent: obj as: s Map.
].

s@(Segment traits) trace: obj@(PrimitiveMethod traits)
[
  s represent: obj as: s Method Primitive.
].

s@(Segment traits) trace: obj@(CompiledMethod traits)
[
  s represent: obj as: s Method Compiled.
].

s@(Segment traits) trace
[s trace: s root].

s@(Segment traits) writeOn: out
[
].

s@(Segment traits) readFrom: in
[
].

s@(Segment traits) linkContents
[
].

prototypes define: #SavedSegment &parents: {Segment}
  &slots: {#file -> File}.

s@(Segment traits) saveToFile: filename
[
  (File newNamed: filename &mode: CreateWrite) sessionDo:
    [| :f | s writeOn: f writer]
].

s@(SavedSegment traits) saveToFile: filename
[s file := (s file newNamed: filename)].

s@(Segment traits) loadFromFile: filename
"Create a new SavedSegment for the file, and load and answer it."
[SavedSegment clone `>> [| :ss | file := (ss file newNamed: filename). load. ]].

s@(SavedSegment traits) save
"Write the segment into its file."
[s file sessionDo: [| :f | s writeOn: f writer] &mode: s file Write].

s@(SavedSegment traits) load
"(Re-)load the segment from its file."
[s file sessionDo: [| :f | s readFrom: f reader] &mode: s file Read].
