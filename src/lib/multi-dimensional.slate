define: #ArrayMD &parents: {Collection. Mapping}
"Multi-dimensional arrays don't readily admit to sequencing or mutation."
&slots: {#dimensions -> {1}.
"Default is a scalar: one dimension, of extent 1."
#contents -> {}
"Store the contents in an array of exactly the right size."}.

amd@(ArrayMD traits) new &capacity: n &dimensions: seq
"&capacity is deprecated for this method. It is meant for compatibility
with Collection methods that require it, particularly select:-type methods.
The alternative is to return a new array of the same dimensions and sparsely
populate it.
If dimensions are given, set up the array to hold enough elements as
specified by an array or vector of dimension sizes. Dimension size 0 is
coerced to 1."
[
  n ifNil:
    [| size | size := (seq ifNil: [amd size]
     ifNotNil:
       [seq inject: 1 into: #* `er ]).
     amd clone `setting: #{#dimensions. #contents}
     to: {seq ifNil: [amd dimensions]. amd contents new &capacity: size}]
    ifNotNil: [Bag newSized: n]
].

amd@(ArrayMD traits) newWithDimensions: seq defaultElement: x
[
  (amd new &dimensions: seq) `>> [contents infect: [| :_ | x]. ]
].

amd@(ArrayMD traits) newFrom: seq dimensions: dimensions
"Use a raw Sequence with some interpretive dimensions to construct an ArrayMD."
[
  amd clone `setting: #{#contents. #dimensions} to: {seq. dimensions}
].

amd@(ArrayMD traits) size
[
  amd contents size
].

amd@(ArrayMD traits) numDimensions
"Dimensions of size 0 or 1 don't introduce actual variations."
[
  amd dimensions count: [| :each | each > 1]
].

#rank alias: #numDimensions on: {ArrayMD traits}.
#dimension alias: #numDimensions on: {ArrayMD traits}.

amd@(ArrayMD traits) dimensionAt: index
[amd dimensions at: index].

amd@(ArrayMD traits) includesKey: index at: dimension
[
  key between: 0 and: (amd dimensionAt: dimension) - 1
].

amd@(ArrayMD traits) keySetAt: dimension
[
  0 below: (amd dimensionAt: dimension)
].

amd@(ArrayMD traits) indexOf: sc@(Sequence traits)
"Returns the place in the contents where the given sequence of coordinates
maps to. This should not be called repetitively, as it would duplicate
a lot of calculation."
[| final offset |
  sc size = amd dimensions size ifFalse: [amd notYetImplemented].
  final := 0.
  offset := 1.
  sc with: amd dimensions do: [| :index :dimSize |
    final += index * offset.
    offset *= dimSize].
  final
].

ArrayMD traits define: #KeyStream &parents: {Collection ReadStream}
  &slots: {#nextKey}.

s@(ArrayMD KeyStream traits) on: amd
[
  s collection := amd.
  resend.
  s
].

s@(ArrayMD KeyStream traits) reset
[
  s nextKey `defaultsTo: s collection dimensions newSameSize.
  s nextKey atAllPut: 0.
].

amd@(ArrayMD traits) keyReader
[
  amd KeyStream newOn: amd
].

s@(ArrayMD KeyStream traits) collectionType
[Array].

s@(ArrayMD KeyStream traits) next
"Increment and return the nextKey."
[| result keyIndex keyValue incrementedIndex |
  s nextKey ifNil: [^ s exhausted].
  result := s nextKey copy.
  keyIndex := s nextKey indexLast.
  [keyIndex > 0 /\ incrementedIndex isNil] whileTrue:
    [keyValue := (s nextKey at: keyIndex).
     keyValue < (s collection dimensionAt: keyIndex)
       ifTrue: [s nextKey at: keyIndex put: keyValue + 1.
                incrementedIndex := keyIndex].
     keyIndex -= 1].
  incrementedIndex
    ifNil: [s nextKey := Nil]
    ifNotNil:
      [incrementedIndex below: s nextKey indexLast do:
        [| :keyIndex | s nextKey at: keyIndex put: 0]].
  result
].

s@(ArrayMD KeyStream traits) position
[
  s collection indexOf: s nextKey
].

s@(ArrayMD KeyStream traits) isAtEnd
"Answers whether the nextKey is the last possible key for the array.
Implemented using the equivalent of allSatisfy: with the block knowing the
index per invocation."
[
  s nextKey doWithIndex:
    [| :keyValue :keyIndex | keyValue < (s collection dimensionAt: keyIndex) ifFalse: [^ True]].
  False
].

amd@(ArrayMD traits) keysDo: block
[
].

amd@(ArrayMD traits) do: block
[
  amd contents do: block
].

amd@(ArrayMD traits) printDimension: d reader: reader dimensions: dims indentLevel: indent
isLast: isLast on: o separatedBy: block
"Luckily the elements are in the preferred printing order in the
container-array, so there's no need to fiddle with indexing etc."
[
  d = dims indexLast
    ifTrue:
      [o ; '{'.
       0 to: (dims last - 2)
         do: [|:_|
              reader next printOn: o.
              block do].
       reader next printOn: o.
       o ; '}'.
       isLast ifFalse: [block do]]
    ifFalse:
      [0 to: ((dims at: d) - 2)
         do: [| :i |
              d = (dims indexLast - 1) ifFalse: [o ; '{'].
              amd printDimension: d + 1 reader: reader dimensions: dims indentLevel: indent + 1
                  isLast: False on: o separatedBy: block.
              d = (dims indexLast - 1) ifFalse: [o ; '}'.  isLast ifFalse: [block do]].
              o newLine.
              indent timesRepeat: [o ; ' ']].
       d = (dims indexLast - 1) ifFalse: [o ; '{'].
       amd printDimension: d + 1 reader: reader dimensions: dims indentLevel: indent + 1
           isLast: True on: o separatedBy: block.
       d = (dims indexLast - 1) ifFalse: [o ; '}']].
].

amd@(ArrayMD traits) printContentsOn: o@(PrettyPrinterMixin traits) separatedBy: block
"ArrayMD prettyPrinting uses its own indention and not the pretty-printers one,
is because it indents only one character per indentation-level, whereas the
pretty printer could be set to indent something else. So, changing the
indentation level of the pretty printer temporarily would mess up the printing
of the elements."
[
  o newLine.
  amd printDimension: 0
      reader: amd contents reader
      dimensions: amd dimensions reversed
      indentLevel: 0
      isLast: False
      on: o
      separatedBy: block
].

ArrayMD traits define: #Stream &parents: {PositionableStream} &slots:
  {#collection -> ArrayMD new}.

ArrayMD traits define: #ReadStream
               &parents: {ArrayMD Stream. ReadStream}.

s@(ArrayMD ReadStream traits) on: c
"Target the stream to the specific collection, and reset the indices."
[s `>> [reset. collection := c. readLimit := c contents size. ]].

rs@(ArrayMD ReadStream traits) next
[| pos |
  pos := rs position.
  pos < rs readLimit
    ifTrue:
      [rs position := pos + 1.
       rs collection contents at: pos]
].

rs@(ArrayMD ReadStream traits) peekAt: offset
[
  rs collection contents at: rs position + offset
].

rs@(ArrayMD ReadStream traits) peek
[rs peekAt: 0].

rs@(ArrayMD ReadStream traits) size
"The limit is effectively the number of elements that can be collected."
[
  rs readLimit
].

amd@(ArrayMD traits) reduce: binBlock ifEmpty: emptyBlock
"The order of elements should not be depended on."
[
  amd contents reduce: binBlock ifEmpty: emptyBlock
].

amd@(ArrayMD traits) newSameSize
[
  amd new
].

ArrayMD traits define: #WriteStream &parents: {Collection Stream. WriteStream}
  &slots: {#writeLimit. #position}.

s@(ArrayMD WriteStream traits) on: c
"Target the stream to the specific collection, and reset the indices."
[s `>> [reset. collection := c. writeLimit := c contents size. ]].

ws@(ArrayMD WriteStream traits) nextPut: obj
[| pos |
  (pos := ws position) >= ws writeLimit
    ifTrue: [ws pastEndPut: obj]
    ifFalse: [ws position := pos + 1.
              ws collection contents at: pos put: obj]
].

amd@(ArrayMD traits) keySetFilteredBy: filter@(Integer traits) at: dimension
[
  ((amd keySetAt: dimension) includes: filter) ifTrue: [filter]
].

amd@(ArrayMD traits) keySetFilteredBy: filter@(Range traits) at: dimension
[
  (amd keySetAt: dimension) /\ filter
].

amd@(ArrayMD traits) keySetFilteredBy: filter@(Method traits) at: dimension
[
  (amd keySetAt: dimension) select: filter
].

amd@(ArrayMD traits) keySetFilteredBy: filter@(Boolean traits) at: dimension
[
  filter ifTrue: [amd keySetAt: dimension] ifFalse: []
].

amd@(ArrayMD traits) keySetFilteredBy: filter@Nil at: dimension
[
  amd keySetAt: dimension
].

amd@(ArrayMD traits) at: s@(Sequence traits)
[| filters result |
  (s includes: Nil) ifFalse: [^ (amd contents at: (amd indexOf: s))].
  filters := s collectWithIndex:
    [| :filter :index | amd keySetFilteredBy: filter at: index].
  (filters anySatisfy: #isEmpty `er)
    ifTrue: [Nil]
    ifFalse: [(result := amd new &dimensions: (filters collect: #size `er )) keysDo:
                [| :indices | filters].
              result]
].

amd@(ArrayMD traits) at: s@(Sequence traits) put: value
[
  (s includes: Nil) ifFalse: [^ (amd contents at: (amd indexOf: s) put: value)].
  
].

