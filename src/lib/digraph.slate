collections define: #Digraph &parents: {LinkedCollection} &slots:
  {#root "A root node, taken arbitrarily."}.
"Digraphs are directed graphs: collections of nodes and edges which are
directed links between the nodes. The nodes and edges are essential, while
the graph just assists the process and provides a Facade."

graph@(Digraph traits) derive &mixins: others &rejects: rejectSlots
"This traits is collaborating, so when derive is used, the collaborating
traits must also be derived to provide automatic protection against the
derived graph user adding conflicting methods to the collaborators."
[| newG |
  newG := resend.
  newG traits define: #Node &parents: {graph Node}.
  newG traits define: #Edge &parents: {graph Edge}.
  newG
].

graph@(Digraph traits) newNodeFromAll: col
"Add a new node, linking from all the nodes in the collection to it. If there
are no nodes in the graph, make this one the root."
"TODO: Check that the nodes are in the graph first?"
[| node |
  node := graph Node clone.
  graph root
    ifNil: [graph root := node]
    ifNotNil: [col do: #(addEdgeTo: node) `er].
  node
].

graph@(Digraph traits) newNodeFrom: node
[
  graph newNodeFromAll: {node}
].

graph@(Digraph traits) newEdgeFrom: source to: target
[
  graph Edge newFrom: source to: target
].

graph@(Digraph traits) allNodes
"Returns all nodes traceable from the root node."
[
  graph root allNodes
].

graph@(Digraph traits) newFromAssociations: col
"Builds a new directed graph from a Collection of Associations between desired
target objects."
[| result seen |
  result := graph clone.
  seen := Dictionary new.
  col do:
    [| :assoc keyNode valueNode |
     keyNode := seen at: assoc key ifAbsentPut:
       [graph Node new `>> [object := assoc key. ]].
     valueNode := seen at: assoc value ifAbsentPut:
       [graph Node new `>> [object := assoc value. ]].
     keyNode addEdgeTo: valueNode].
  result root := seen anyOne.
  result
].

graph@(Digraph traits) newFrom: root walking: block
"Builds a new directed graph from the given root object by recursively calling
the block to return a collection of neighbors from existing ones, and avoiding
duplicates."
[| result seen |
  result := graph clone `setting: #{#root} to: {root}.
  seen := Dictionary new.
  result addNodesFrom: root byApplying: block withSeen: seen.
  result
].

graph@(Digraph traits) addNodesFrom: start byApplying: block withSeen: seen
[| newNeighbors |
  newNeighbors := ExtensibleArray new.
  ((block applyWith: start) do: [| :each | 
    seen at: each ifAbsentPut: [| nn |
      nn := graph Node new `>> [object := each. ].
      newNeighbors add: nn]]).
   newNeighbors do: [| :each |
     graph newEdgeFrom: start to: each.
     graph addNodesFrom: each byApplying: block withSeen: seen].
  graph
].

Digraph traits define: #Node &parents: {Cloneable} &slots:
  { #transitions -> ExtensibleArray new.
    "The collection of edges leading away from the Node. They are ordered by
    default. TODO: review and revise this."
    #object -> Nil
    "The object represented by the Node, if any."}.

node@(Digraph Node traits) new &capacity: n
[node clone `setting: #{#transitions}
      to: {node transitions new &capacity: (n ifNil: [4])}].

node@(Digraph Node traits) copy
[node clone `setting: #{#transitions} to: {node transitions copy}].

node@(Digraph Node traits) addEdgeTo: target
[
  node transitions add: (Digraph Edge newTo: target)
].

node@(Digraph Node traits) hasSimpleLoop
"Answers whether an outgoing edge simply points back to the node."
[
  node transitions anySatisfy: [| :each | each target == node]
].

node@(Digraph Node traits) isTerminal
"Answers whether there are no outgoing edges or only a loopback."
[
  node transitions isEmpty
    \/ [node transitions size = 1
      /\ [node hasSimpleLoop]]
].

node@(Digraph Node traits) allNodesInto: set
[
  (set includes: node) ifFalse:
    [set add: node.
     node transitions do: [| :each | each target allNodesInto: set]].
  node
].

node@(Digraph Node traits) allNodes
[| nodes |
  nodes := Set new.
  node allNodesInto: nodes.
  nodes
].

node@(Digraph Node traits) removeDuplicateEdges
[
  node transitions := node transitions as: Set.
  node
].

node@(Digraph Node traits) removeDuplicateNodes
[| nodes |
  [nodes := node allNodes.
   nodes do: [| :each | each mergeTransitions. each removeDuplicateEdges].
   node removeDuplicateNodes: nodes] whileTrue.
  node
].

node@(Digraph Node traits) removeDuplicateNodes: col
[| merged nodePartition |
  merged := False.
  nodePartition := Dictionary new.
  col do:
    [| :each |
     (nodePartition
        at: {each transitions}
        ifAbsentPut: [ExtensibleArray new])
       add: each].
  nodePartition
    do: [| :each seen |
         seen := ExtensibleArray new.
         each do: [| :thisNode existingNode |
                   (existingNode := seen
                      detect: #(transitionsMatch: thisNode) `er)
                     ifNil: [seen add: thisNode]
                     ifNotNil: [merged := True.
                                thisNode forwardTo: existingNode]]].
  merged
].

node@(Digraph Node traits) transitionsMatch: node2
[
  node transitions
    allSatisfy: [| :each | (node2 transitions includes: each)
           \/ [node2 hasTransitionTo: node mirroring: each]]
].

Digraph traits define: #Edge &parents: {Cloneable} &slots:
  { #target "The target of the edge.".
#keys -> SortedSet new. "The set of possible keys that can activate the edge as a transition.
No keys possible means that it is an epsilon transition."
}.

edge@(Digraph Edge traits) newFrom: source to: target
[
  source addEdgeTo: target
].

edge@(Digraph Edge traits) newTo: target
[
  edge new `>> [target := target. ]
].

edge@(Digraph Edge traits) = edge2@(Digraph Edge traits)
[
  edge target = edge2 target
].

edge@(Digraph Edge traits) hash
[
  edge target hash
].

collections define: #KeyedDigraph &parents: {Digraph}.
"Represents a state-transition machine. That is, the nodes and directed edges
are states and transitions, respectively, with the edges activated by one
of a set of keys that they possess."

node@(KeyedDigraph Node traits) addEdgeTo: target keys: col
[
  node transitions add: (KeyedDigraph Edge newTo: target keys: col)
].

node@(KeyedDigraph Node traits) allKeyTransitions: set into: node2
[| index each |
  (set includes: node) ifTrue: [^ #{}].
  set add: node.
  node2 addActions: node action."TODO: remove this dependency on #action."
  index := 0.
  [index <= node transitions size] whileTrue:
    [each := node transitions at: index.
     index += 1.
     each isNotKeyed
       ifTrue: [each target allKeyTransitions: set into: node2]
       ifFalse: [(node2 transitions includes: each)
                   ifFalse: [node2 transitions add: each]]].
  node
].

node@(KeyedDigraph Node traits) mergeKeyTransitions
[| targetMap |
  targetMap := IdentityDictionary new.
  node transitions copy do:
    [| :each |
     (targetMap includesKey: each target)
       ifTrue: [(targetMap at: each target) mergeWith: each.
                node transitions remove: each]
       ifFalse: [targetMap at: each target put: each]].
  node
].

node@(KeyedDigraph Node traits) mergeTransitions
[
  node allNodes do: #mergeKeyTransitions `er.
  node
].

node@(KeyedDigraph Node traits) hasTransitionTo: node2 mirroring: edgeBw
[
  node = edgeBw target
    /\ [(node transitions
                      detect: [| :edge | edge target = node2]
              ifNone: [^ False]) keys = edgeBw keys]
].



edge@(KeyedDigraph Edge traits) newTo: target
[resend `>> [keys := Nil. ]].

edge@(KeyedDigraph Edge traits) newTo: target keys: col
[(edge newTo: target) `>> [keys := col. ]].

edge@(KeyedDigraph Edge traits) isEpsilonTransition
[
  edge keys isNil
].

edge@(KeyedDigraph Edge traits) isEmpty
[
  edge keys isEmpty
].

edge@(KeyedDigraph Edge traits) = edge2@(KeyedDigraph Edge traits)
[
  edge target = edge2 target /\ [edge keys = edge2 keys]
].

edge@(KeyedDigraph Edge traits) hash
"TODO: ensure that this will work on more than just character-keys."
[
  (edge target hash bitShift: 14) bitXor: edge keys hash
].

edge@(KeyedDigraph Edge traits) does: seq includeKey: key
[| start stop mid |
  start := 0.
  stop := seq size.
  stop isZero ifTrue: [^ False].
  [mid := start + stop // 2. mid == start]
    whileFalse: [((seq at: mid) as: Integer) < (key as: Integer)
           ifTrue: [start := mid]
           ifFalse: [stop := mid]].
  (seq at: start) == key
    \/ [(seq at: stop) == key]
].

edge@(KeyedDigraph Edge traits) removeKeys: seq
[
  edge keys: (edge keys reject: [| :each | edge does: seq includeKey: each])
].

edge@(KeyedDigraph Edge traits) mergeWith: edge2
[
  edge keys: ((edge keys union: edge2 keys) as: SortedSet).
].
