"A Converter translates data from one type to another."
prototypes ensureNamespace: #converters &delegate: True.

converters define: #Converter &slots: {
  #in. "the input stream"
  #out -> Console writer "the output stream"
}.

c@(Converter traits) new
[c clone].

c@(Converter traits) newFrom: in to: out
"Creates a new Converter using the given streams for input and output."
[c clone `setting: #{#in. #out} to: {in reader. out writer}].

c@(Converter traits) newFrom: in
[c clone `setting: #{#in} to: {in reader}].

c@(Converter traits) newTo: out
[c clone `setting: #{#out} to: {out writer}].

c@(Converter traits) convert
[overrideThis].

c@(Converter traits) convert: x@(Sequence traits)
[c convert: x to: (x new &capacity: 0)].

c@(Converter traits) convert: x through: y
[
  (c newFrom: x to: y) `>> [convert. ]
].

c@(Converter traits) convert: x to: y
[
  (c convert: x through: y) out contents
].

r@(ReadStream traits) >> c@(Converter traits)
"Sets up a new Converter reading from the given source. This is unlike normal
>> calls in that it does NOT answer a ReadStream, but a Converter."
[c newFrom: r].

c@(Converter traits) >> out
[
  c out := out writer.
  c convert.
  out
].

c1@(Converter traits) >> c2@(Converter traits)
[
  buf ::= ExtensibleArray new.
  c1 >> buf.
  c2 newFrom: buf
].

converters define: #Encoder &parents: {Converter}.
converters define: #Decoder &parents: {Converter}.

converters define: #Base64Encoder &parents: {Encoder}.
converters define: #Base64Decoder &parents: {Decoder}.
"Uses the Base64 data-encoding scheme to store/load binary data in printable
ASCII Characters. Based on RFC 1421, 2045."
"TODO: RFC 2152 extensions for Unicode?"

Base64Encoder traits table ::=
  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' as: Array.
Base64Decoder traits table ::=
  [result ::= Array newSize: 256.
   Base64Encoder table doWithIndex:
     [| :each :index | result at: (each as: Integer) put: index].
   result] do.

c@(Base64Encoder traits) convert
[| triple |
  triple := 0. "one triple consists of three chars"
  [c in isAtEnd] whileFalse:
    [triple = 18 ifTrue: [c out ; '\r\n'. triple := 0].
     byte1 ::= c in next as: Integer.
     c out nextPut: (c table at: byte1 >> 2).
     c in isAtEnd
       ifTrue:
     [c out nextPut: (c table at: (byte1 bitAnd: 2r11) << 4).
      c out ; '==']
       ifFalse:
     [byte2 ::= c in next as: Integer.
      c out nextPut: (c table at:
        ((byte1 bitAnd: 2r11) << 4 bitOr: byte2 >> 4)).
      c in isAtEnd
        ifTrue: [c out nextPut: (c table at: (byte2 bitAnd: 2r1111) << 2).
             c out nextPut: $=]
        ifFalse: [byte3 ::= c in next as: Integer.
              c out nextPut: (c table at:
            ((byte2 bitAnd: 2r1111) << 2 bitOr: byte3 >> 6)).
              c out nextPut: (c table at: (byte3 bitAnd: 2r111111)).
              triple += 1]]].
  c out ; '\r\n'.
].

c@(Base64Decoder traits) convert
[
  [c in isAtEnd] whileFalse:
    ["TODO: raise an exception on failure?"
     (byte1 ::= c nextValue) ifNil: [^ Nil].
     (byte2 ::= c nextValue) ifNil: [^ Nil].
     c out nextPut: ((byte1 << 2 bitOr: byte2 >> 4) as: ASCIIString Character).
     (byte3 ::= c nextValue) ifNil: [^ Nil].
     c out nextPut: (byte2 << 4 bitAnd: 16rFF)
       #(bitOr: byte3 >> 2)
       #(as: ASCIIString Character).
     (byte4 ::= c nextValue) ifNil: [^ Nil].
     c out nextPut: (byte3 << 6 bitAnd: 16rFF)
       #(bitOr: byte4)
       #(as: ASCIIString Character)].
].

c@(Base64Decoder traits) nextValue
"Reads and answers the next value, checking for the suffix code $=, and using
the translation table."
[| value |
  [c in isAtEnd \/ [(value := c in next) = $=] ifTrue: [^ Nil].
   (c table at: (value as: Integer)) ifNotNilDo: [| :x | ^ x]] loop
].
