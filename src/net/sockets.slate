lobby ensureNamespace: #Net.

Net define: #Socket &parents: {ExternalResource} &slots: {#address}.
Net define: #SocketServerConnection &parents: {Net Socket} &slots: {#peerAddress -> Nil}.
Net define: #SocketAddress &parents: {Cloneable} &slots: {#address -> Nil}.
Net define: #IP4Address &parents: {Net SocketAddress}.
Net define: #IP6Address &parents: {Net SocketAddress}.
Net define: #UnixDomainAddress &parents: {Net SocketAddress}.

Net define: #SocketServer &parents: {Cloneable}
 &slots: {#pipeToLoop -> Nil. #ip -> Nil. #port -> Nil. #dispatch -> Nil}.

Net Socket traits ensureNamespace: #ErrorCodes.
Net Socket traits ensureNamespace: #Domains.
Net Socket traits ensureNamespace: #Types.
Net Socket traits ensureNamespace: #Protocols.
Net Socket traits addSlot: #SelectTimeout valued: 99999999.
Net Socket traits addSlot: #BufferSize valued: 1024.

Net Socket addSlot: #AddressTypes valued: {Net IP4Address. Net IP6Address. Net UnixDomainAddress}.

Net Socket ErrorCodes addSlot: #Dictionary valued: Dictionary new.

[| :item |
  Net Socket ErrorCodes addImmutableSlot: item key valued: item value.
  Net Socket ErrorCodes Dictionary add: item value -> item key.
] for: {
  #Error -> -1.
  #AccessDenied -> -2.
  #NoSupport -> -3.
  #Invalid -> -4.
  #Overflow -> -5.
  #NoMemory -> -6.
  #InUse -> -7.
  #BadFD -> -8.
  #Again -> -9.
  #WouldBlock -> -10.
  #ConnectionAborted -> -11.
  #Interrupted -> -12.
  #AlreadyInProgress -> -13.
  #ConnectionRefused -> -14.
  #InProgress -> -15.
  #AlreadyConnected -> -16.
  #NetworkUnreachable -> -17.
  #Timeout -> -18.
}.

conditions define: #SocketError
  &parents: {ExternalResource SeriousCondition}
  &slots: {#error. #errorCode}.

c@(SocketError traits) describeOn: console
[
  console ; 'Socket error ' ;  c errorCode printString ; ' (' ; c error printString ; ')' ; '\n'
].

Net Socket Domains `>> [
  addImmutableSlot: #Local valued: 1.
  addImmutableSlot: #IP4 valued: 2.
  addImmutableSlot: #IP6 valued: 3.
  ].

Net Socket Types `>> [
  addImmutableSlot: #Stream valued: 1.
  ].

Net Socket Protocols `>> [
  addImmutableSlot: #Default valued: 0.
  ].

s@(Net Socket traits) throwError: code
[
  SocketError new `>> [error := Net Socket ErrorCodes Dictionary at: code. errorCode := code. signal]
].

s@(Net Socket traits) newFor: domain type: type protocol: proto
[| return |
  return := s new.
  (return handle := domain socketCreate: type protocol: proto)
    isNegative ifTrue: [s throwError: return handle].
  return
].

addr@(Net SocketAddress traits) newOn: array port: port
[
  addr new `>> [address := addr domain createIPAddress: array port: port options: #{}. ]
].

_@(Net SocketAddress traits) forDomain: domain
[
  Net Socket AddressTypes do: [| :at | at domain = domain ifTrue: [^ at]].
  ^ Nil
].

addr@(Net SocketAddress traits) separatePort: string@(String traits)
[| regex |
  regex := Regex Matcher newOn: '^([^:]+)(\\:(\\d+))?$'.
  (regex match: string) = -11
    ifTrue: [{Nil. Nil}]
    ifFalse: [{regex subexpressionAt: 0. regex subexpressionAt: 2}]
].

addr@(Net SocketAddress traits) newOn: string@(String traits)
[| regex portIp array |
  "fixme ipv6.. we don't lookup the name here"
  portIp := addr separatePort: string.
  (portIp anySatisfy: #isNil `er) ifTrue: [error: 'unable to separate port and ip'].
  regex := Regex Matcher newOn: '^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$'.
  (regex match: portIp first) = -1
      ifTrue: [error: 'cannot get ip from string: ' ; string].
  array := {regex subexpressionAt: 0. regex subexpressionAt: 1. regex subexpressionAt: 2. regex subexpressionAt: 3. }
    collect: #(as: Integer) `er.
  Net IP4Address new `>> [address := Net IP4Address domain createIPAddress: array port: (portIp second as: Integer) options: #{}. ]
].

addr@(Net IP4Address traits) domain
[
  Net Socket Domains IP4
].

addr@(Net IP6Address traits) domain
[
  Net Socket Domains IP6
].

addr@(Net UnixDomainAddress traits) domain
[
  Net Socket Domains Local
].

addr@(Net SocketAddress traits) domain
[
  overrideThis
].

x@(Net SocketAddress traits) as: y@(Net SocketAddress traits)
[
  y new `>> [address := x address. ]
].

x@(String traits) as: y@(Net SocketAddress traits)
[
  y newOn: x
].

s@(Net Socket traits) enable
[
  s address
    ifNil: [error: 'cannot connect to nil address']
    ifNotNilDo:
      [| :address return |
       return := s handle socketConnect: address.
       return isNegative /\ [return ~= Net Socket ErrorCodes InProgress]
         ifTrue: [s throwError: return]].

].

s@(Net Socket traits) connectTo: addr@(Net SocketAddress traits)
[
  s address := addr address.
  s enable
].

s@(Net Socket traits) bindTo: sa@(Net SocketAddress traits)
[| return |
  s handle isNegative
    ifTrue: [s throwError: Net Socket ErrorCodes Invalid]
    ifFalse: [(return := s handle socketBindOn: sa address)
                isNegative ifTrue: [s throwError: return].
              return]
].

s@(Net Socket traits) listenSize: count
[| return |
  (return := s handle socketListenSize: count)
    isNegative ifTrue: [s throwError: return].
  return
].

s@(Net Socket traits) disable
[| return |
  (return := s handle closePipe)
    isNegative ifTrue: [s throwError: return].
].

s@(Net Socket traits) canRead
[
  ({s} selectOnReadPipesFor: 0) isEmpty not
].

s@(Net Socket traits) canWrite
[
  ({s} selectOnWritePipesFor: 0) isEmpty not
].

s@(Net Socket traits) acceptConnection
[| return |

  return := s handle socketAcceptConnection.
  (return is: Integer)
    ifTrue: [s throwError: return].
  return first isNegative
    ifTrue: [s throwError: return first].
  Net SocketServerConnection new `>> [handle := return first. peerAddress := return second. ]
].

s@(Net SocketServer traits) newOn: ip port: port dispatch: block
[
  s new `>> [ip := ip. port := port. dispatch := block. ]
].

s@(Net SocketServer traits) start &domain: addressDomain
[
  addressDomain `defaultsTo: Net IP4Address.
  s pipeToLoop:
    (currentProcess forkAndDo:
      [| :commSock servSock |
        servSock := Net Socket newFor: addressDomain domain type: Net Socket Types Stream protocol: Net Socket Protocols Default.
        "fixme handle ipv6"
        inform: 'Creating listening socket ' ; servSock printString.
        inform: 'bind: ' ; (servSock bindTo: (addressDomain newOn: s ip port: s port)) printString.
        inform: 'listen: '; (servSock listenSize: 5) printString.
        [| ready |
          inform: 'Waiting for connection...' ; {commSock. servSock handle} printString.
          ready := {commSock. servSock handle} selectOnReadPipesFor: Net Socket SelectTimeout.
          ready ifNil: [inform: 'Error waiting for pipes. Exiting...'. lobby exit].
          (ready includes: commSock) ifTrue: [inform: 'Got message from commsock. Exiting...'. commSock closePipe. servSock handle closePipe. lobby exit].
          (ready includes: servSock handle)
            ifTrue:
              [([servSock acceptConnection] on: Error do: [| :e | inform: 'Accept error: ' ; e description. e return: Nil])
                 ifNotNilDo:
                   [| :peer child |
                    child := currentProcess forkAndDo:
                      [| :parent | [s dispatch applyWith: parent with: peer]
                                     ensure: [parent closePipe. peer handle closePipe. lobby quit]].
                    "fixme... have a way to communinicated back"
                    peer handle closePipe.
                    child closePipe.
                    inform: 'Connection from %@', peer peerAddress]]
        ] loop.
      ]).

].

s@(Net SocketServer traits) startForeground &domain: addressDomain
[| servSock |
  addressDomain `defaultsTo: Net IP4Address.
  [
  servSock := (Net Socket newFor: addressDomain domain type: Net Socket Types Stream protocol: Net Socket Protocols Default).
  "fixme handle ipv6"
  inform: 'Creating listening socket ' ; servSock printString.
  inform: 'bind: ' ; (servSock bindTo: (addressDomain newOn: s ip port: s port)) printString.
  inform: 'listen: '; (servSock listenSize: 5) printString.
  [| ready | inform: 'Waiting for connection...' ; servSock handle printString.
              ready := ({servSock handle} selectOnReadPipesFor: Net Socket SelectTimeout).
              ready ifNil: [inform: 'Error waiting for pipes. Exiting...'. lobby exit].
              (ready includes: servSock handle)
                ifTrue: [| peer child |
                          peer := ([servSock acceptConnection] on: Error do: [| :e | inform: 'Accept error: ' ; e description. e return: Nil]).
                          peer ifNotNil:
                            [child := (currentProcess
                                       forkAndDo: [| :parent | [s dispatch applyWith: parent with: peer]
                                                                ensure: [parent closePipe. peer handle closePipe. lobby quit]]).
                             "fixme... have a way to communinicated back"
                             peer handle closePipe.
                             child closePipe.
                             inform: 'Connection from ' ; peer peerAddress printString]]
            ] loop.
  ] ensure: [servSock ifNotNil: [servSock close. "fixme cleanup"]].
].

s@(Net SocketServer traits) startAndRunInForeground &domain: addressDomain
[| servSock |
  addressDomain `defaultsTo: Net IP4Address.
  [
  servSock := (Net Socket newFor: addressDomain domain type: Net Socket Types Stream protocol: Net Socket Protocols Default).
  "fixme handle ipv6"
  inform: 'Creating listening socket ' ; servSock printString.
  inform: 'bind: ' ; (servSock bindTo: (addressDomain newOn: s ip port: s port)) printString.
  inform: 'listen: '; (servSock listenSize: 5) printString.
  [| ready | inform: 'Waiting for connection...' ; servSock handle printString.
              ready := ({servSock handle} selectOnReadPipesFor: Net Socket SelectTimeout).
              ready ifNil: [inform: 'Error waiting for pipes. Exiting...'. lobby exit].
              (ready includes: servSock handle)
                ifTrue: [| peer |
                          peer := ([servSock acceptConnection] on: Error do: [| :e | inform: 'Accept error: ' ; e description. e return: Nil]).
                          peer ifNotNil: [inform: 'Connection from ' ; peer peerAddress printString.
                                            [s dispatch applyWith: Nil with: peer]
                                            ensure: [peer handle closePipe]]]
            ] loop.
  ] ensure: [servSock ifNotNil: [servSock close. "fixme cleanup"]].
].

s@(Net SocketServer traits) stop
[
  s pipeToLoop nextPutAll: 'quit'.
].

Net define: #SocketStream &parents: {ExternalResource ReadWriteStream} &slots: {}.

s@(Net SocketStream traits) collectionType
[
  ByteArray
].

s@(Net SocketStream traits) isAtEnd
[
  False
].

"This should return immediately with the amount read"
s@(Net SocketStream traits) next: n putInto: seq startingAt: start
[
  seq readFromPipe: s resource handle start: start end: start + n
].

"This is a blocking read"
s@(Net SocketStream traits) next: n
[| arr read totalRead fds |
  arr := (s collectionType new &capacity: n).
  totalRead := 0.
  [totalRead < n]
    whileTrue: [fds := ({s resource handle} selectOnReadPipesFor: Net Socket SelectTimeout).
                fds isEmpty ifTrue: [^ (arr first: totalRead)].
                read := (s next: n - totalRead putInto: arr startingAt: totalRead).
                read <= 0 ifTrue: [^ (arr first: totalRead)]. "fixme throw error?"
                (totalRead += read) = n ifTrue: [^ arr]]
].

"This write should return immediately with the number written"
s@(Net SocketStream traits) next: n putAll: seq startingAt: start
[
  seq writeToPipe: s resource handle start: start end: start + n
].

"This is a blocking write"
s@(Net SocketStream traits) nextPutAll: bytes
[| written totalWritten n fds |
  totalWritten := 0.
  n := bytes size.
  [totalWritten < n]
    whileTrue: [fds := ({s resource handle} selectOnWritePipesFor: Net Socket SelectTimeout).
                fds isEmpty ifTrue: [^ (bytes first: totalWritten)].
                written := (s next: n - totalWritten putAll: bytes startingAt: totalWritten).
                written <= 0 ifTrue: [^ (bytes first: totalWritten)]. "fixme throw error?"
                (totalWritten += written) = n ifTrue: [^ bytes]].
  bytes
].
