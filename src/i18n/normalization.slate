
"This file contains routines for normalizing Unicode strings."

Unicode define: #NormalizationForm &parents: {Cloneable}
  &slots: {#Type -> #Canonical.
       #Compose -> True}.

unf@(Unicode NormalizationForm traits) type: type composition: composition
[unf cloneSettingSlots: #{#Type. #Compose} to: {type. composition}].

Unicode define: #NFC &builder:
[Unicode NormalizationForm type: #Canonical composition: True].
Unicode define: #NFKC &builder:
[Unicode NormalizationForm type: #Compatibility composition: True].
Unicode define: #NFD &builder: 
[Unicode NormalizationForm type: #Canonical composition: False].
Unicode define: #NFKD &builder:
[Unicode NormalizationForm type: #Compatibility composition: False].

s@(UnicodeString traits) normalizeTo: form@(Unicode NormalizationForm traits)
"Normalize string to given normalization form. For NFD and NFKD only
decomposition is done, for NFC and NFKC first decomposition and then
composition. For NFC and NFD only canonical (de)compositions are done,
for NFKC and NFKD both canonical and compatibility. NFKC and NFKD may
lose information."
[| decomp |
  decomp := s decomposeForForm: form.
  form Compose
    ifTrue: [decomp composeForForm: form]
    ifFalse: [decomp]
].

s@(UnicodeString traits) decomposeForForm: form@(Unicode NormalizationForm traits)
"Decompose string for given normalization form."
[| buffer current |
  buffer := ExtensibleArray new.
  ([| :result |
    s do:
      [| :each |
       (current := each getRecursiveDecompositionFor: form) first combiningClass isZero
         ifTrue: 
       [result ; (buffer destructiveStableSortBy:
                    [| :a :b | a combiningClass <= b combiningClass]).
        buffer clear].
       buffer addAll: current].
    buffer isNotEmpty \/ [current first combiningClass isZero not] ifTrue:
      [result ; (buffer destructiveStableSortBy: 
                   [| :a :b | a combiningClass <= b combiningClass])]]
     writingInto: (ExtensibleArray newSizeOf: s)) as: s
].

c@(UnicodeCharacter traits) getRecursiveDecompositionFor: form
"Decompose character. If the form is NFC or NFD, perform canonical decomposition.
If it's NFKC or NFKD, perform both canonical and compatibility decomposition."
[
 c isHangulSyllable ifTrue: [^ c decomposeHangul].
 c decompose
   ifNil: [{c}]
   ifNotNilDo:
     [| :decomp |
      form Type = #Canonical /\ [c decompositionType = #Compatibility]
        ifTrue: [{c}]
    ifFalse:
      [| temp |
       temp := decomp collect: #(getRecursiveDecompositionFor: form) `er.
       (temp gather: #; `er) ifNil: [#{}]]]
].

s@(UnicodeString traits) composeForForm: form@(Unicode NormalizationForm traits)
"Compose string for given normalization form."
[| starterPos compPos starterCh lastClass ch chClass composite |
  starterPos := 0.
  compPos := 1.
  starterCh := s first.
  lastClass := starterCh combiningClass.
  lastClass isZero ifFalse: [lastClass := 256].
  s allButFirstDo:
    [| :ch |
     chClass := ch combiningClass.
     composite := (starterCh composeWith: ch).
     composite isNotNil /\ [(lastClass < chClass \/ [lastClass isZero]) 
                  \/ [composite isHangulLV]]
       ifTrue: [s at: starterPos put: composite.
        starterCh := composite]
       ifFalse: [chClass isZero ifTrue: [starterPos := compPos.
                     starterCh := ch].
         lastClass := chClass.
         s at: compPos put: ch.
         compPos += 1]].
  s first: compPos
].

c@(UnicodeCharacter traits) composeWith: c2
"Compose c with c2. If both are hangul, perform composition algorithmically,
otherwise get the composition from database."
[
  `conditions: (
    [c isHangulL /\ [c2 isHangulV]] ->
      [((c code - Unicode Hangul LBase * Unicode Hangul VCount
           + (c2 code - Unicode Hangul VBase)) * Unicode Hangul TCount 
          + Unicode Hangul SBase) as: c].
    [c isHangulLV /\ [c2 isHangulT]]
      -> [c code + c2 code - Unicode Hangul TBase as: c]
  ) otherwise: [c code composeWith: c2 code]
].

"Hangul:"

"Hangul characters consist of three parts: L, V, and T.  These can be all in one
character LVT (Hangul syllable), two characters LV + T, or three
characters L + V + T."

Unicode define: #Hangul.
Unicode Hangul define: #SBase -> 16rAC00.
Unicode Hangul define: #LBase -> 16r1100.
Unicode Hangul define: #VBase -> 16r1161.
Unicode Hangul define: #TBase -> 16r11A7.
Unicode Hangul define: #VCount -> 21.
Unicode Hangul define: #TCount -> 28.
Unicode Hangul define: #LCount -> 19.
Unicode Hangul define: #NCount -> (Unicode Hangul VCount * Unicode Hangul TCount).
Unicode Hangul define: #SCount -> (Unicode Hangul LCount * Unicode Hangul NCount).

c@(UnicodeCharacter traits) isHangulSyllable
[c code between: 16rAC00 and: 16rD7A3].

c@(UnicodeCharacter traits) isHangulL
[c code between: 16r1100 and: 16r1112].

c@(UnicodeCharacter traits) isHangulV
[c code between: 16r1161 and: 16r1175].

c@(UnicodeCharacter traits) isHangulLV
[
  c isHangulSyllable /\
   [(c code - Unicode Hangul SBase rem: Unicode Hangul TCount) isZero]
].

c@(UnicodeCharacter traits) isHangulT
[c code between: 16r11A7 and: 16r11C2].

c@(UnicodeCharacter traits) decomposeHangul
[| SIndex result L V T |
 c isHangulSyllable
   ifFalse: [^ (c as: UnicodeString)].
 SIndex := c code - Unicode Hangul SBase.
 result := (ExtensibleArray new).
 L := Unicode Hangul LBase + (SIndex quo: Unicode Hangul NCount).
 V := Unicode Hangul VBase + ((SIndex rem: Unicode Hangul NCount) quo: Unicode Hangul TCount).
 T := Unicode Hangul TBase + (SIndex rem: Unicode Hangul TCount).
 result add: (L as: c).
 result add: (V as: c).
 T ~= Unicode Hangul TBase ifTrue: [result add: (T as: c)].
 result
].
