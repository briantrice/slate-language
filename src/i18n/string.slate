
prototypes define: #EncodedCharacter &parents: {Cloneable} &slots: {#code}.

c@(EncodedCharacter traits) newCode: code
[c clone `setting: #{#code} to: {code}].

"By default EncodedString contains integers, and converts them to characterEncoding
when accessed. All here can be overridden by encodings."

prototypes define: #EncodedString &parents: {String} &slots: {#elementType}.

globals ensureNamespace: #CharacterData.

_@(EncodedString traits) elementType
[
  overrideThis
].

s@(EncodedString traits) copy
[
  s clone
].

s@(EncodedString traits) new
[overrideThis].

s@(EncodedString traits) size
[overrideThis].

s@(EncodedString traits) at: n
[overrideThis].

s@(EncodedString traits) at: n put: c@(EncodedCharacter traits)
[overrideThis].

s@(EncodedString traits) isEmpty
[
  overrideThis
].

s@(Sequence traits) as: es@(EncodedString traits)
[
 s collect: [| :each | each as: es elementType] into: (es newSizeOf: s)
].

EncodedCharacter traits compareAndHashUsingSlots: #{#code}.

s@(EncodedString traits) hash
"FIXME"
[| n bit |
  n: 0.
  bit: 0.
  s do:
    [| :c |
     n: ((n + (c hash bitShift: bit)) bitAnd: 16rFFFFFF).
     bit: ((bit + 1) bitAnd: 16rF)].
  n
].

s@(EncodedString traits) escaped [].

_@(EncodedString traits) accepts: _@(Root traits)
[False].

s@(EncodedString traits) stripAll: c@(Collection traits) startingAt: start
[
  [| :result |
   start below: s size
     do: [| :index each |
      each: (s at: index).
          (c includes: each)
        ifFalse: [result nextPut: each]]]
    writingInto: (s copyFrom: 0 to: start - 1)
].

s@(EncodedString traits) stripAll: c@(Collection traits)
[s stripAll: c startingAt: 0 ].

s@(EncodedString traits) strip: c@(EncodedCharacter traits) startingAt: start
[s stripAll: {c} startingAt: start ].

s@(EncodedString traits) strip: c@(EncodedCharacter traits)
[s stripAll: {c} startingAt: 0].

s@(EncodedString traits) indexPast: delims startingAt: start
"Answer the index of the character within the receiver, starting at start,
that does NOT match one of the delimiters. If the receiver does not
contain any of the delimiters, answer size. Assumes the delimiters to
be a non-empty string."
[
  start below: s size do:
    [| :index | delims detect: [| :c | c  = (s at: index)] ifNone: [^ index]].
  s size
].

s@(EncodedString traits) indexPast: delims
[s indexPast: delims startingAt: 0].

s@(EncodedString traits) splitWith: c@(EncodedCharacter traits)
[| subStrings sepIndex nextSep |
  subStrings: ExtensibleArray new.
  sepIndex: 0.
  [sepIndex < s size]
    whileTrue: [nextSep: (s indexOf: c
                startingAt: sepIndex + 1 ifAbsent: [s size]).
        subStrings add: (s copyFrom: sepIndex to: nextSep - 1).
        sepIndex: nextSep + 1].
  subStrings
].

s@(EncodedString traits) splitWith: delims@(EncodedString traits)
"Answer the Sequence of substrings resulting from splitting the string with
the given delimiting characters."
[| subStrings keyStart keyEnd |
  subStrings: ExtensibleArray new.
  keyEnd: 0.
  [keyEnd < s size]
    whileTrue: [keyStart: (s indexPast: delims startingAt: keyEnd).
        keyEnd: (s firstIndexOf: delims startingAt: keyStart).
        keyStart < keyEnd
          ifTrue: [subStrings add:
            (s copyFrom: keyStart to: keyEnd - 1)]].
  subStrings
].

s@(EncodedString traits) stripAll: c@(Collection traits) startingAt: start
[| result |
  result: (s copyFrom: 0 to: start - 1) writer.
  start below: s size
    do: [| :index each |
     each: (s at: index).
         (c includes: each)
       ifFalse: [result nextPut: each]].
  result contents
].

s@(EncodedString traits) stripAll: c@(Collection traits)
[s stripAll: c startingAt: 0].

s@(EncodedString traits) strip: c startingAt: start
[s stripAll: {c} startingAt: start ].

s@(EncodedString traits) strip: c
[s stripAll: {c} startingAt: 0].

s@(EncodedString traits) stripStartingAt: start
[| result |
  result: (s copyFrom: 0 to: start - 1) writer.
  start below: s size
    do: [| :index each |
     each: (s at: index).
         each isWhitespace
       ifFalse: [result nextPut: each]].
  result contents
].

s@(EncodedString traits) strip
[s stripStartingAt: 0].

s@(EncodedString traits) toUppercase
"Modifies the Characters to be uppercase."
[s doWithIndex: #toUppercase `er].

s@(EncodedString traits) toLowercase
"Modifies the Characters to be lowercase."
[s infect: #toLowercase `er].

s@(EncodedString traits) toSwapCase
"Modifies the Characters to have swapped case."
[
  s infect: [| :each | each isLowercase
    ifTrue: [each toUppercase]
    ifFalse: [each toLowercase]]
].

s@(EncodedString traits) capitalize
"Modifies the first Character to be uppercase."
[
  s isEmpty
    ifFalse: [s at: 0 put: s first toUppercase].
  s
].

_@(EncodedString traits) codeRange [overrideThis].
_@(EncodedCharacter traits) isDigit [overrideThis].
_@(EncodedCharacter traits) isLetter [overrideThis].
_@(EncodedCharacter traits) isAlphanumeric [overrideThis].
_@(EncodedCharacter traits) isUppercase [overrideThis].
_@(EncodedCharacter traits) isLowercase [overrideThis].
_@(EncodedCharacter traits) isWhitespace [overrideThis].

"Also add accepts: for acceptable characters"
