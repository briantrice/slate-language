
"An Unordered, Extensible Collection of elements without duplicates. Being
a duplicate is determined by a binary comparison and associated hash
function on each object."

collections define: #Set &parents: {NoDuplicatesCollection} &slots: {
  #tally -> 0.
  #contents -> (Array newSize: 10).
  #containsNil -> False.
  #hashBlock -> (#hash `er) .
  #equalsBlock -> (#= `er) .
}.

collections IdentitySet ::=
  Set cloneSettingSlots: #{#hashBlock. #equalsBlock} to: {#identityHash`er. #==`er}.
"IdentitySets specialize their behavior to compare solely by object identity."

c@(Set traits) new &capacity: n
[
  c clone `>>
    [contents := c contents new &capacity: ((n ifNil: [0]) max: 1). tally := 0. ]
].

c@(Set traits) = d@(Set traits)
"Comparison is by iteration over each element in the Sets. This is avoided
when possible by making very cheap comparisons first."
[
  c == d
    \/ [c size = d size
      /\ [c containsNil eqv: d containsNil]
      /\ [c allSatisfy: [| :each | d includes: each]]]
].

c@(Set traits) copy
[c clone `>> [contents := c contents copy. ]].

c@(Set traits) size
"The number of elements, the conceptual size of the Set."
[
  c tally + (c containsNil ifTrue: [1] ifFalse: [0])
].

c@(Set traits) capacity
"How large the Set can be without requiring a new Array of larger size."
[
  c contents size
].

c@(Set traits) clear
[
  c contents clear.
  c tally := 0.
  c containsNil := False.
].

c@(Set traits) atRandomBy: random
"Collaborate with a RandomStream to provide one of the elements at random."
[
  c emptyCheck.
  (randomIndex ::= random next \\ c contents size) below: c contents size do:
    [| :i | (c contents at: i) ifNotNilDo: [| :obj | ^ obj]].
  0 below: randomIndex do:
    [| :i | (c contents at: i) ifNotNilDo: [| :obj | ^ obj]].
].

c@(Set traits) include: obj
"Ensure that the object is a member of the Set by adding it if not found."
[
  (c contents at: (index ::= c scanFor: obj))
   ifNil: [c atNewIndex: index put: obj].
  obj
].

c@(Set traits) include: _@Nil [c containsNil := True. ].

c@(Set traits) remove: obj ifAbsent: block
[
  (c contents at: (index ::= c scanFor: obj))
    ifNil: [block do]
    ifNotNil:
      [c contents at: index put: Nil.
       c tally -= 1.
       c fixCollisionsFrom: index.
       obj]
].

c@(Set traits) remove: _@Nil ifAbsent: block
[
  c containsNil
    ifTrue: [c containsNil := False. ]
    ifFalse: [block do]
].

c@(Set traits) collect: block
[
  result ::= c newSameSize.
  c do: [| :each | result include: (block apply*, each)].
  result
].

c@(Set traits) do: block
[
  c containsNil ifTrue: [block apply*, Nil].
  c tally = 0 ifFalse:
    [c contents do:
       [| :each | each ifNotNil: [block apply*, each]]].
].

c@(Set traits) doWithIndex: block
"Allow for iterating through the elements with a notional indexing."
[| index |
  index := -1.
  c do: [| :item |
     item ifNotNil: [block apply*, item, (index += 1)]].
].

c@(Set traits) atNewIndex: index put: obj
"A method which does not check for consistency, and merely inserts the
object and updates the size. Only trusted methods should call this."
[
  c contents at: index put: obj.
  c tally += 1.
  c fullCheck.
].

c@(Set traits) fixCollisionsFrom: index
"The element at index has been removed and replaced by Nil.
This moves forward from there, relocating any entries that were
placed below due to collisions with this one."
[| oldIndex newIndex element |
  c capacity `cache.
  oldIndex := index.
  [(oldIndex += 1) >= c capacity
     ifTrue: [oldIndex := 1].
   (element := c keyAt: oldIndex) isNil]
    whileFalse:
      [(newIndex := c scanFor: element) = oldIndex
         ifFalse: [c swap: oldIndex with: newIndex]].
].

c@(Set traits) fullCheck
"Keep the array at least 1/4 free for decent hash behavior."
[
  c contents size - c tally < (c contents size // 4 max: 1)
    ifTrue: [c grow].
].

c@(Set traits) growSize
"The default amount to grow by, either doubling the size or a minimum."
[
  c contents size max: 4
].

c@(Set traits) growBy: growthAmount
"Replace the array with a new one larger by growthAmount, and copy over the
elements with the non-checking method."
[
  oldElems ::= c contents.
  c contents := c contents new &capacity: c contents size + growthAmount.
  c tally := 0.
  oldElems do: [| :each |
    each ifNotNil: [c noCheckAdd: each]].
  c
].

c@(Set traits) grow
"Grow the default amount."
[
  c growBy: c growSize
].

c@(Set traits) keyAt: index
"Subclasses can override this to make fixCollisionsFrom: work."
[
  c contents at: index
].

c@(Set traits) swap: index1 with: index2
"Subclasses can override this to make fixCollisionsFrom: work."
[
  c contents swap: index1 with: index2.
].

c@(Set traits) noCheckAdd: obj
"Obviously, this method is faster by avoiding a consistency check, and so
should only be called by trusted methods."
[
  c contents at: (c scanFor: obj) put: obj.
  c tally += 1.
].

c@(Set traits) noCheckAdd: _@Nil
[
  c containsNil := True.
].

c@(Set traits) rehash
"Use a cloned Set to re-calculate and place the objects in the array, and
then simply re-use that Set's array."
[
  tempSet ::= c newSameSize.
  c do: #(tempSet noCheckAdd: _) `er.
  c contents := tempSet contents.
].

c@(Set traits) scanFor: obj
"Scan the array for the first slot containing either a Nil or an element
matching the object. Answer the index of that slot or 0 if no slot is
found. Override this to provide different matching criteria."
[| element |
  end ::= c contents size.
  start ::= (c hashBlock apply*, obj) \\ end.
  block ::=
    [| :index |
     (element := c contents at: index) isNil
       \/ [c equalsBlock apply*, element, obj]
       ifTrue: [^ index]].
  "Search from the hash MOD size to the end."
  start below: end do: block.
  "Search from the beginning."
  0 below: start do: block.
  Nil
].

c@(Set traits) like: obj
"Answer an object in the Set that compares correctly to the given object, or
Nil if none such is found."
[
  (c scanFor: obj) ifNotNilDo: [| :index | c contents at: index]
].

c@(Set traits) includes: obj
"Check the index determined by the hash, and return true whether the array
slot isn't empty."
[
  (c scanFor: obj)
    ifNil: [False]
    ifNotNilDo: [| :index | (c contents at: index) isNotNil]
].

c@(Set traits) includes: _@Nil [c containsNil].

c@(Collection traits) copyWithoutDuplicates &comparison: equalsBlock
"Iterate through the Collection, creating a new one where only the first
element (encountered by do:) distinct according to the comparison is included."
[
  seen ::= Set new.
  equalsBlock ifNotNil: [seen equalsBlock := equalsBlock].
  [| :result |
   c do: [| :each | (seen includes: each)
              ifFalse: [result nextPut: (seen include: each)]]
   ] writingAs: c
].
