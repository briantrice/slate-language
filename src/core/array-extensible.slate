
collections define: #ExtensibleArray &parents: {ArrayBacked} &slots: {#firstIndex -> 0. #lastIndex -> -1}.
"An ExtensibleArray implemented by an Array with padding on both ends for
the contents."

es@(ExtensibleArray traits) new &capacity: n
[resend `>> [firstIndex := 0. lastIndex := -1. ]].

es@(ExtensibleArray traits) size
[
  es lastIndex - es firstIndex + 1
].

es@(ExtensibleArray traits) at: index
[
  (es includesKey: index)
    ifTrue: [es contents at: es firstIndex + index]
    ifFalse: [index keyNotFoundOn: es]
].

es@(ExtensibleArray traits) at: index put: value
[
  (es includesKey: index)
    ifTrue: [es contents at: es firstIndex + index put: value]
    ifFalse: [index keyNotFoundOn: es]
].

es@(ExtensibleArray traits) clear
"Resets to the values for being empty. lastIndex is -1 to coordinate with the
size method and addLast:."
[
  resend.
  es firstIndex := 0.
  es lastIndex := -1.
  es
].

es@(ExtensibleArray traits) copyReplaceFrom: start to: end with: c
"Performs an insert or append as necessary if the replacing collection doesn't
fit in the bounds. eg start < 0 prepends, start > size appends."
[| delta startIndex endIndex |
  delta := 0.
  ess ::= es size.
  cs ::= c size.
  start < 0
    ifTrue: [startIndex := endIndex := 0]
    ifFalse:
      [endIndex := end.
       (startIndex := start) > ess
         ifTrue: [startIndex := endIndex := size + 1]
         ifFalse: [endIndex < (startIndex - 1) \/ [endIndex > (ess - 1)]
                     ifTrue: [^ Nil].
                   delta := endIndex - startIndex + 1]].
  result ::= es new &capacity: ess + cs - delta.
  0 below: startIndex do: [| :index | result add: (es at: index)].
  0 below: cs do: [| :index | result add: (c at: index)].
  endIndex + 1 below: ess do: [| :index | result add: (es at: index)].
  result
].

es@(ExtensibleArray traits) growFirst &by: growBy
"Provide a larger array and map the contents in to yield more growth area at
the beginning. The growth factor is 2."
[
  defaultGrowBy ::= es growSize - es capacity.
  growBy := (growBy
    ifNil: [defaultGrowBy]
    ifNotNil: [growBy max: defaultGrowBy]).
  newContents ::= es lastIndex + growBy >= (es capacity - 1)
    ifTrue: [es contents new &capacity: es capacity + growBy]
    ifFalse: [es contents].
  offset ::= newContents size - es lastIndex - 1.
  es lastIndex downTo: es firstIndex do:
    [| :index | newContents at: index + offset put: (es contents at: index)].
  es firstIndex := es firstIndex + offset.
  es lastIndex := es lastIndex + offset.
  es contents := newContents
].

es@(ExtensibleArray traits) grow
"This is the default for growing since add: addLast:s."
[es growLast].

es@(ExtensibleArray traits) growLast &by: growBy
"Provide a larger array and map the contents in to yield more growth area at
the end. The growth factor is 2."
[
  defaultGrowBy ::= es growSize - es capacity.
  growBy := (growBy
    ifNil: [defaultGrowBy]
    ifNotNil: [growBy max: defaultGrowBy]).
  newContents ::= es firstIndex - growBy <= 0
    ifTrue: [es contents new &capacity: es capacity + growBy]
    ifFalse: [es contents].
  es firstIndex upTo: es lastIndex do:
    [| :index |
     newContents
       at: index - es firstIndex
       put: (es contents at: index)].
  es lastIndex -= es firstIndex.
  es firstIndex := 0.
  es contents := newContents
].

es@(ExtensibleArray traits) addFirst: obj
[
  (firstIndex ::= es firstIndex) = 0 ifTrue: [es growFirst].
  es firstIndex -= 1.
  es contents at: es firstIndex put: obj.
  obj
].

es@(ExtensibleArray traits) addLast: obj
[
  es lastIndex + 1 < es capacity ifFalse: [es growLast].
  es lastIndex += 1.
  es contents at: es lastIndex put: obj.
  obj
].

es@(ExtensibleArray traits) insert: obj after: member
[
  es add: obj after: member
].

es@(ExtensibleArray traits) add: obj after: member
[
  (es find: member) ifNotNilDo:
    [| :index | es at: index + 1 insert: obj. obj]
].

es@(ExtensibleArray traits) insert: obj before: member
[
  es add: obj before: member
].

es@(ExtensibleArray traits) add: obj before: member
[
  (es find: member) ifNotNilDo:
    [| :index | es at: index insert: obj. obj]
].

es@(ExtensibleArray traits) remove: obj ifAbsent: block
[| index |
  index := es firstIndex.
  [index <= es lastIndex] whileTrue:
    [obj = (es contents at: index)
      ifTrue: [es contents replaceFrom: index to: es lastIndex - 1
          with: es contents startingAt: index + 1.
          es contents at: es lastIndex put: es contents defaultElement.
          es lastIndex -= 1.
          ^ obj]
      ifFalse: [index += 1]].
  block do
].

es@(ExtensibleArray traits) removeAllSuchThat: test
"Remove each element of the receiver for which aBlock evaluates to true.
The method in ExtensibleCollection is O(N^2); this is O(N)."
[| n |
  n := es firstIndex.
  es firstIndex to: es lastIndex do:
   [| :index |
    (test applyWith: (es contents at: index)) ifFalse:
      [es contents at: n put: (es contents at: index).
       n += 1]].
  n to: es lastIndex do: [| :index | es contents at: index put: Nil].
  es lastIndex := n - 1.
  es
].

es@(ExtensibleArray traits) at: index remove: n
"Remove the next N objects currently starting from the given index, sliding
items from the right over to fill in the places."
[
  localStart ::= index + es firstIndex.
  es contents replaceFrom: localStart to: es lastIndex - n
      with: es contents startingAt: localStart + n.
  es lastIndex -= n.
  es
].

es@(ExtensibleArray traits) removeAt: index
"Remove the object currently at the given index, sliding items from the right
over to fill in the place."
[
  removed ::= es at: index.
  localIndex ::= index + es firstIndex.
  es contents replaceFrom: localIndex to: es lastIndex - 1
      with: es contents startingAt: localIndex + 1.
  es contents at: es lastIndex put: es contents defaultElement.
  es lastIndex -= 1.
  removed
].

es@(ExtensibleArray traits) removeFirst
[
  es emptyCheck.
  firstObj ::= es contents at: es firstIndex.
  es contents at: es firstIndex put: es contents defaultElement.
  es firstIndex += 1.
  firstObj
].

es@(ExtensibleArray traits) removeLast
[
  es emptyCheck.
  lastObj ::= es contents at: es lastIndex.
  es contents at: es lastIndex put: es contents defaultElement.
  es lastIndex -= 1.
  lastObj
].

es@(ExtensibleArray traits) removeFirst: n
[
  n > es size ifTrue: [n := es size].
  result ::= es contents new &capacity: n.
  es firstIndex below: es firstIndex + n do:
    [| :i | result at: i put: (es contents at: i).
     es contents at: i put: es contents defaultElement].
  es firstIndex += n.
  result
].

es@(ExtensibleArray traits) removeLast: n
[
  n > es size ifTrue: [n := es size].
  result ::= es contents new &capacity: n.
  es lastIndex above: (es lastIndex -= n)
    do: [| :i | result at: (n -= 1) put: (es contents at: i).
     es contents at: i put: es contents defaultElement].
  result
].

c@(Collection traits) collect: block into: es@(ExtensibleArray traits)
"Override to use the specific implementation."
[
  c do: [| :each | es addLast: (block applyWith: each)].
  es
].

es@(ExtensibleArray traits) collect: block from: start to: end
"Override to use the specific implementation."
[| result |
  start < 0 \/ [end >= es size]
    ifTrue: [result := es new]
    ifFalse:
      [result := es new &capacity: end - start + 1.
       es firstIndex + start to: es firstIndex + end do:
         [| :index | result addLast: (block applyWith: (es contents at: index))]].
  result
].

es@(ExtensibleArray traits) do: block
[| index |
  index := es firstIndex.
  limit ::= es lastIndex.
  [index <= limit] whileTrue:
    [block applyWith: (es contents at: index).
     index += 1].
  es
].

es@(ExtensibleArray traits) reverseDo: block
[| index |
  index := es lastIndex.
  limit ::= es firstIndex.
  [index >= limit] whileTrue:
    [block applyWith: (es contents at: index).
     index -= 1].
  es
].

c@(Collection traits) select: block into: es@(ExtensibleArray traits)
[
  c do: [| :each | (block applyWith: each) ifTrue: [es addLast: each]].
  es
].

c@(Sequence traits) collectWithIndex: binBlock into: es@(ExtensibleArray traits)
"Override to use addLast: vice at:put:."
[
  c doWithIndex:
    [| :each :index | es addLast: (block applyWith: each with: index)].
  es
].

es@(ExtensibleArray traits) find: obj
[| index |
  index := es firstIndex.
  limit ::= es lastIndex.
  [index <= limit] whileTrue:
    [(es contents at: index) = obj ifTrue: [^ index].
     index += 1].
  Nil
].

es@(ExtensibleArray traits) makeGapAt: index &size
"Make a gap at the requested index, and return the start offset of
the created gap in the contents array."
[
  size `defaultsTo: 1.
  `conditions: (
    [size isNegative]
      -> [error: 'Gap size must be bigger then 0'].
    [index isNegative \/ [index > es size]]
      -> [index keyNotFoundOn: es].
    [index isZero]
      -> [es firstIndex - size < 0 ifTrue: [es growFirst &by: size].
          es firstIndex := es firstIndex - size]
  ) otherwise:
    [es lastIndex + size >= es capacity ifTrue: [es growLast &by: size].
     contentsIndex ::= es firstIndex + index.
     index = es size ifFalse:
       [es contents
          replaceFrom: contentsIndex + size
          to: es lastIndex + size
          with: es contents
          startingAt: contentsIndex].
     es lastIndex += size.
     contentsIndex]
].

es@(ExtensibleArray traits) at: index insert: obj
[
  es contents at: (es makeGapAt: index) put: obj
].

es@(ExtensibleArray traits) at: index insertAll: col
[
  startOffset ::= es makeGapAt: index &size: col size.
  col doWithIndex: [| :each :index | es contents at: startOffset + index put: each].
  es
].

es@(ExtensibleArray traits) move: obj to: index
"Re-position the object so that it has the given index, and slide up/down other
objects as needed."
[
  (src ::= es find: obj)
    ifNil: [obj elementNotFoundOn: es].
  (tgt ::= index + es startIndex) = src ifFalse:
    [src > tgt
       ifTrue:
         [es contents
            replaceFrom: tgt + 1
            to: src
            with: es contents
            startingAt: tgt]
       ifFalse:
         [es contents
            replaceFrom: src
            to: es contents lastIndex
            with: es contents
            startingAt: src + 1].
     es contents at: tgt put: obj].
  es
].
