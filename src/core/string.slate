
"string is an abstract class basically"
prototypes define: #String &parents: {Sequence. Collection. Mapping}.

String traits define: #Character.

a@(String Character traits) cr [$\r].

a@(String Character traits) lf [$\n].

a@(String Character traits) tab [$\t].

a@(String Character traits) space [$\s].

a@(String Character traits) stringEscape [$\\].

i@(Integer traits) as: a@(String Character traits)
"FIXME: convert Integers to ASCIIString Character by default.
This should later be replaced with some smarter framework or an optional encoding."
[
  a == String Character
    ifTrue: [i as: ASCIIString Character]
    ifFalse: [resend]
].

"ASCIIString Character traitsWindow atSlotNamed: #traits1 put: String Character traits."

"fix, timmy: i'm not sure what was intended here..."
ASCIIString Character traitsWindow _delegates: 
{Root traits. Oddball traits. String Character traits. ASCIIString Character traits}.

ASCIIString Character traits CharacterSet ::= bootstrapCharacters as: Array.
"The full ASCII character set."
ASCIIString Character traits Whitespace ::= '\s\t\n\v\f\r\0'.
ASCIIString Character traits Vowels ::= 'AEIOUaeiou'.
ASCIIString Character traits Delimiters ::= '()[]{}\',` "'.

a@(ASCIIString Character traits) as: _@(Integer traits)
[a code].

i@(Integer traits) as: a@(ASCIIString Character traits)
[a CharacterSet at: i].

a@(ASCIIString Character traits) = b@(ASCIIString Character traits)
[
  a code = b code
].

ch@(ASCIIString Character traits) hash
[
  ch code
].

a@(ASCIIString Character traits) codeRange
[0 to: 255].

a@(ASCIIString Character traits) allCharacters
[
  a codeRange collect: #(as: a) `er
].

ch@(ASCIIString Character traits) isAlphanumeric
[
  ch isLetter \/ [ch isDigit]
].

ch@(ASCIIString Character traits) isWhitespace
[
  ch Whitespace includes: ch
].

ch@(ASCIIString Character traits) isDelimiter
[
  ch Delimiters includes: ch
].

ch@(ASCIIString Character traits) isDigit: radix
[
  value ::= ch code.
  `conditions: (
    [value between: #[$0 code] and: #[$9 code]]
      -> [value - #[$0 code] < radix].
    [value between: #[$A code] and: #[$Z code]]
      -> [value - #[$A code] < (radix - 10)].
    [value between: #[$a code] and: #[$z code]]
      -> [value - #[$a code] < (radix - 10)]
  ) otherwise: [False]
].

ch@(ASCIIString Character traits) isDigit
[
  ch isDigit: 10
].

ch@(ASCIIString Character traits) toDigit: radix
[
  (ch isDigit: radix) ifFalse: [^ Nil].
  value ::= ch code.
  `conditions: (
    [value >= #[$a code]]
      -> [value - #[$a code] + 10].
    [value >= #[$A code]]
      -> [value - #[$A code] + 10].
    [value >= #[$0 code]]
      -> [value - #[$0 code]]
  ) otherwise: [Nil]
].

ch@(ASCIIString Character traits) toDigit
[
  ch toDigit: 10
].

ch@(ASCIIString Character traits) isLetter
[
  ch isUppercase \/ [ch isLowercase]
].

ch@(ASCIIString Character traits) isLowercase
[ch code between: #[$a code] and: #[$z code]].

ch@(ASCIIString Character traits) toUppercase
[
  ch isLowercase
    ifTrue: [ch code - #[$\s code] as: ch]
    ifFalse: [ch]
].

ch@(ASCIIString Character traits) isUppercase
[ch code between: #[$A code] and: #[$Z code]].

ch@(ASCIIString Character traits) toLowercase
[
  ch isUppercase
    ifTrue: [ch code + #[$\s code] as: ch]
    ifFalse: [ch]
].

ch@(ASCIIString Character traits) isVowel
[
  ch Vowels includes: ch
].

ch@(ASCIIString Character traits) isQuote
[
  ch = $\' \/ [ch = $\"]
].

c1@(ASCIIString Character traits) < c2@(ASCIIString Character traits) 
[
  c1 code < c2 code
].

c1@(ASCIIString Character traits) > c2@(ASCIIString Character traits) 
[
  c1 code > c2 code
].

s1@(ASCIIString traits) < s2@(ASCIIString traits)
[
  (s1 lexicographicallyCompare: s2) = -1
].

s1@(ASCIIString traits) <= s2@(ASCIIString traits)
[
  s1 < s2 \/ [s1 = s2]
].

ch@(ASCIIString Character traits) isPrintable
[ch code between: #[$\s code] and: #[$~ code]].

s@(String traits) new &capacity: n
"By default return ASCIIString's.
FIXME: this should redirect to some better encoding-preserving string implementation..."
[
  s == String
    ifTrue: [ASCIIString new &capacity: n]
    ifFalse: [resend]
].

s@(ASCIIString traits) size [18 primitiveDo: {s}]. "faster than: #size sendTo: {s} through: {ByteArray}"
s@(String traits) size [overrideThis].

a@(ByteArray traits) as: s@(String traits)
"FIXME: calls to this method should be either converted to direct ASCIIString calls,
or an optional hint should be used to decide on the encoding in the ByteArray."
[
  s == String
    ifTrue: [a as: ASCIIString]
    ifFalse: [resend]
].

s@(String traits) writer
"FIXME: calls to this method should be either converted to direct ASCIIString calls,
or an optional hint should be used to decide on the encoding in the ByteArray."
[
  s == String
    ifTrue: [ASCIIString writer]
    ifFalse: [resend]
].

s@(String traits) elementType
[s Character].

_@(String traits) defaultElement
[overrideThis].

_@(String traits) lexicographicallyCompare: _@(String traits)
[overrideThis].

_@(String traits) sorted
"Answers a new String with the same Characters lexicographically sorted."
[overrideThis].

_@(String traits) accepts: _@(Root traits)
[False].

s@(String traits) copy
[s clone].

s@(String traits) hash
[| result bit |
  result := 0.
  bit := 0.
  s do:
    [| :c |
     result := result + (c hash bitShift: bit) bitAnd: 16rFFFFFF.
     bit := bit + 1 bitAnd: 16rF].
  result
].

s@(String traits) capitalize
"Modifies the first Character to be uppercase."
[
  s isEmpty
    ifFalse: [s at: s indexFirst put: s first toUppercase].
  s
].

s@(String traits) uncapitalize
"Modifies the first Character to be lowercase."
[
  s isEmpty
    ifFalse: [s at: s indexFirst put: s first toLowercase].
  s
].

s@(String traits) capitalized
[
  s isEmpty
    ifTrue: [s]
    ifFalse: [s copy capitalize]
].

s@(String traits) uncapitalized
[
  s isEmpty
    ifTrue: [s]
    ifFalse: [s copy uncapitalize]
].

s@(String traits) toUppercase
"Modifies the Characters to be uppercase."
[s infect: #toUppercase `er ].

s@(String traits) toLowercase
"Modifies the Characters to be lowercase."
[s infect: #toLowercase `er ].

s@(String traits) toSwapCase
"Modifies the Characters to have swapped case."
[
  s infect: [| :each | each isLowercase
    ifTrue: [each toUppercase]
    ifFalse: [each toLowercase]]
].

s@(String traits) toCamelCase &separators: delims
"Split the String, capitalize the split parts, and concatenate them together."
[((s split &separators: delims) collect: #capitalize `er ) join].

s@(String traits) fromCamelCase &separator: delim
"Separates the String into words based on lowercase-uppercase letter
boundaries, and joins them using the specified delimiter String."
[
  delim `defaultsTo: ' '.
  indices ::= ExtensibleArray new*, -1.
  s indexFirst below: s indexLast - 1 do:
    [| :index | (s at: index) isLowercase /\ [(s at: index + 1) isUppercase]
       ifTrue: [indices addLast: index]].
  indices addLast: s indexLast.
  words ::= ExtensibleArray new.
  indices chainPairsDo:
    [| :last :next | words addLast:
      (s copyFrom: last + 1 to: next) toLowercase].
  words join &separator: delim
].

String traits define: #SmallWords -> {'a'. 'an'. 'and'. 'as'. 'at'. 'but'. 'by'. 'en'. 'for'. 'if'. 'in'. 'of'. 'on'. 'or'. 'the'. 'to'. 'v'. 'via'. 'vs'. 'vs.'}.

s@(String traits) titleCase
[
  (words ::= s split) doWithIndex:
    [| :word :index |
     (word includes: $&)
       ifTrue: [word toUppercase]
       ifFalse:
     [(s SmallWords includes: word) /\ [index > 0]
            ifTrue: [word toLowercase]
        ifFalse: [word capitalize]]].
  words join &separator: ' '
].

s@(String traits) abbreviation
"Answers the usual convention for abbreviation via initials."
[s toCamelCase select: #isUppercase`er].

s@(String traits) escaped
"Answers a new String with printed slash-escapes so it can be read in as the
same value. This gives programmatic access to the right input for any String."
[
  [| :result |
   s doWithIndex:
     [| :c :index |
      c caseOf:
        {
          $\' -> [result ; '\\\''].
          $\t -> [result ; '\\t'].
          $\n -> [result ; '\\n'].
          $\v -> [result ; '\\v'].
          $\f -> [result ; '\\f'].
          $\r -> [result ; '\\r'].
          $\b -> [result ; '\\b'].
          $\a -> [result ; '\\a'].
          $\e -> [result ; '\\e'].
          $\0 -> [result ; '\\0'].
      $\s -> [result ; '\\ '].
        }
        otherwise:
          [c isPrintable
             ifTrue: [result nextPut: c]
             ifFalse: 
               [result ; '\\x'.
                c code // 16 printOn: result &radix: 16.
                c code \\ 16 printOn: result &radix: 16]]
    ]] writingAs: s
].

s@(String traits) readFrom: src
"Reads the first thing in the String (or Stream) as a String literal.
An error is raised if the return type does not match the requested one."
[
  (srcStream ::= src reader) peek = $\'
    ifTrue:
      [srcStream next.
       (Syntax Lexer newOn: srcStream) readString value]
    ifFalse: [error: 'The source does not start with a quotation mark.']
].

s@(String traits) unescaped
[s readFrom: '\'' ; s ; '\''].

s@(String traits) asAn
"Answer a copy of the String prepended with 'a ' or 'an ' in order to treat
it as specifying the instance of a noun named by the String."
[
  s first isVowel ifTrue: ['an ' ; s] ifFalse: ['a ' ; s]
].

s@(String traits) plural
"Answer a copy of the String appended with -s, -es, or -ies in order to treat
it as a pluralized noun. This does not try to be too clever, because that
requires a full lexicon (for English) - only use this for technical purposes."
[
  `conditions: {
    [s last toLowercase = $o] -> [s ; 'es'].
    [s last isVowel] -> [s ; 's'].
    [s last toLowercase = $y]
      -> [(s at: s indexLast - 1) isVowel not
        ifTrue: [s allButLast ; 'ies']
        ifFalse: [s ; 's']].
    [s endsWith: 'us'] -> [(s allButLast: 2) ; 'i'].
    [s endsWith: 'sis'] -> [(s allButLast: 2) ; 'es'].
    [s endsWith: 'on'] -> [(s allButLast: 2) ; 'a'].
    [#{'ex'. 'ix'} anySatisfy: #(s endsWith: _) `er] -> [(s allButLast: 2) ; 'ices'].
    [#{'ss'. 'sh'. 'ch'. 'dge'} anySatisfy: #(s endsWith: _) `er] -> [s ; 'es']
  } otherwise: [s ; 's']
].

s@(String traits) split &separators: delims
[s splitWithAny: (delims ifNil: [s elementType Whitespace])].

s@(String traits) stripAll: c@(Collection traits) startingAt: start
[| each |
  result ::= (s copyFrom: 0 to: start - 1) writer.
  start below: s size do:
    [| :index |
     each := s at: index.
     (c includes: each)
       ifFalse: [result nextPut: each]].
  result contents
].

s@(String traits) stripAll: c@(Collection traits)
[s stripAll: c startingAt: 0 ].

s@(String traits) strip: c@(String Character traits) startingAt: start
[s stripAll: {c} startingAt: start ].

s@(String traits) strip: c@(String Character traits)
[s stripAll: {c} startingAt: 0].

s@(String traits) stripStartingAt: start
[s stripAll: s elementType Whitespace startingAt: start].

s@(String traits) strip
[s stripAll: s elementType Whitespace startingAt: 0].

s@(String traits) trimAll: c@(Collection traits)
[
  (s indexOfFirstSatisfying: [| :each | (c includes: each) not])
    ifNil: [s new]
    ifNotNilDo:
      [| :from |
       s sliceFrom: from
         to: (s indexOfLastSatisfying: [| :each | (c includes: each) not])]
].

s@(String traits) trim
[
  s trimAll: s elementType Whitespace
].

s@(String traits) evaluate
[
  s evaluateIn: lobby
].

s@(String traits) evaluateIn: namespace
[| expr |
  parser ::= Syntax Parser newOn: s.
  [[(expr := parser next) evaluateIn: lobby.
    parser isAtEnd] on: Stream Exhaustion do: [False]] whileFalse.
].

c@(String Character traits) as: s@(String traits)
[(s new &capacity: 1) `>> [at: 0 put: c. ]].

s@(String traits) as: i@(Integer traits) &radix
"Reads a radix-(10) Integer from the string."
[
  (s isNotEmpty /\ [s first = $-])
    ifTrue: [((s copyFrom: 1) as: i &radix: radix) negated]
    ifFalse:
      [radix `defaultsTo: 10.
       s inject: 0 into:
         [| :n :c | (c isDigit: radix) ifFalse: [^ n].
                    n * radix + (c toDigit: radix)]]
].

"ASCIIString traitsWindow `>> [
  atSlotNamed: #traits1 put: String traits.
  atSlotNamed: #traits3 put: Sequence traits.
  atSlotNamed: #traits4 put: Collection traits.
  atSlotNamed: #traits5 put: Mapping traits. ].
"
ASCIIString traitsWindow _delegates:
 {Root traits. Derivable traits. Cloneable traits. Mapping traits.
  Collection traits. Sequence traits. ByteArray traits. String traits. ASCIIString traits}.

s@(ASCIIString traits) at: i
[
  (s byteAt: i) as: s elementType
].

s@(ASCIIString traits) at: i put: c
[
  s byteAt: i put: c code
].

s@(ASCIIString traits) at: i put: code@(Integer traits)
[
  s byteAt: i put: code intoByte
].

_@(ASCIIString traits) defaultElement [$\0].

s@(ASCIIString traits) includes: c@(String Character traits)
"A pure optimization override to avoid coercing all of the elements to Characters.
This is about twice as fast as the very generic Sequence method."
[
  c code `cache.
  s keysDo: [| :i | (s byteAt: i) == c code ifTrue: [^ True]].
  False
].

_@(ASCIIString traits) accepts: _@(ASCIIString Character traits)
[True].

s1@(ASCIIString traits) lexicographicallyCompare: s2@(ASCIIString traits)
"Answer a sign of comparing the two Strings' Characters in order."
[
  s1 with: s2 do:
    [| :c1 :c2 cmp | (cmp := c1 code <=> c2 code) isZero ifFalse: [^ cmp]].
  s1 size <=> s2 size
].

s@(ASCIIString traits) sorted
"Answers a new String with the same Characters lexicographically sorted."
[(s sortBy: #<= `er ** #code `er ) as: s].

ch@(ASCIIString Character traits) rot13
[| code |
  (code := ch toLowercase code) >= #[$a code] /\ [code < #[$n code]]
    ifTrue: [code += 13]
    ifFalse: [code > #[$m code] /\ [code <= #[$z code]]
        ifTrue: [code -= 13]].
  ch isUppercase
    ifTrue: [(code as: ch) toUppercase]
    ifFalse: [code as: ch]
].

s@(ASCIIString traits) rot13
[s collect: #rot13 `er].

s@(ASCIIString traits) as: a@(ByteArray traits)
"Since ByteArrays cannot hold objects, they must store character codes."
[
  result ::= a newSizeOf: s.
  s doWithIndex:
    [| :each :index | result at: index put: (each as: a elementType)].
  result
].

a@(ByteArray traits) as: s@(ASCIIString traits)
"Since ByteArrays cannot hold objects, they must store character codes."
[
  result ::= s newSizeOf: a.
  a doWithIndex:
    [| :each :index | result at: index put: (each as: s elementType)].
  result
].

name@(ASCIIString traits) as: _@(Symbol traits)
[name intern].
