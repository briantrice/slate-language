
File traitsWindow _map delegates at: File traitsWindow _map delegates size - 2 put: ExternalResource traits.
File addSlotsFrom: ExternalResource.
File traits ReadWrite ::= Oddball clone.
File traits Read ::= Oddball clone.
File traits Write ::= Oddball clone.
File traits CreateWrite ::= Oddball clone.
File addSlot: #mode valued: File ReadWrite.
File traits ByLocation ::= Dictionary new.
"Maps locators to File objects, leading to a weak normalization.
TODO: This currently only maps open File objects, which can lead to conflicts. Weak references could fix this."

f@(File traits) size
"Get the file size in bytes."
[
  f isOpen ifTrue: [f sizeOf: f handle]
       ifFalse: [f fileInfo ifNotNilDo: #fileSize `er]
].

f@(File traits) position
"Answer the handle cursor position."
[f positionOf: f handle].

f@(File traits) position: index
"Set the handle cursor position."
[f reposition: f handle to: index].

f@(File traits) isAtEnd
"Whether the file handle cursor is at the end of the file. True also if closed."
[f isOpen ifTrue: [f atEndOf: f handle] ifFalse: [True]].

f@(File traits) restoringPositionDo: block
[
  origPos ::= f position.
  [block applyWith: f] ensure: [f position := origPos]
].

f@(File traits) at: index
[f restoringPositionDo: [| :f | f position := index. f reader next]].

f@(File traits) at: index put: byte
[f restoringPositionDo: [| :f | f position := index. f writer nextPut: byte]].

f@(File traits) register
"Adds the File to the registration dictionary."
[f ByLocation at: f locator ifAbsentPut: [f]].

f@(File traits) unregister
"Removes the File from the registration dictionary."
[
  f ByLocation at: f locator ifPresent:
    [| :reg | reg == f ifTrue: [f ByLocation removeKey: f locator]]
].

f@(File traits) named: filename &mode
"Accesses or creates the File object associated with the specified Locator.
Notably, a File created this way needs to be #unregister`ed manually if it
is never enabled or disabled before being garbage-collected."
[
  locator ::= filename as: f Locator.
  f ByLocation at: locator ifAbsentPut: [f newNamed: locator &mode: mode]
].

f@(File traits) newNamed: filename &mode
"Forces the creation of a new instance of a File for the given Locator. If none
is registered, this File gets registered, otherwise it does not interfere with
registration."
[
  mode `defaultsTo: f mode.
  locator ::= filename as: f Locator.
  f ByLocation at: locator ifPresent: [| :file | ].
  f cloneSettingSlots: #{#handle. #locator. #mode} to: {Nil. locator. mode}
].

s@(String traits) file
[
  File newNamed: s
].

f@(File traits) enable
"Open the file in its associated mode."
[
  filename ::= f locator as: String.
  (f handle :=
    f mode caseOf:
      {f Read -> [f handleForInput: filename].
       f Write -> [f handleForOutput: filename].
       f ReadWrite -> [f handleFor: filename].
       f CreateWrite -> [f handleForNew: filename]}
     otherwise: [error: 'No mode specified.'])
    ifNil: [f connectionFailure]
    ifNotNil: [f register].
  f
].

file@(File traits) disable
"Invokes the File close primitive, and also removes it from the registration
dictionary, to minimize the potential for leaks."
[file close: file handle. file unregister].

f@(File traits) sessionDo: block &mode
"Extends the basic sessionDo: with a way to temporarily set the mode."
[
  mode
    ifNil: [resend]
    ifNotNil: [oldMode ::= f mode. f mode := mode. resend. f mode := oldMode]
].

f@(File traits) touch
"Opens the file, creating it if necessary, and updating access time."
[
  oldmode ::= f mode.
  [f mode := f CreateWrite.
   f sessionDo: [| :_ | ]]
     ensure: [f mode := oldmode]
].

f@(File traits) create
"Create a File via #touch if it does not exist."
[f exists ifFalse: [f touch]. f].

f@(File traits) delete
"Deletes the file, ensuring that it is closed first."
[
  f ensureClosed.
  (f deleteFileNamed: (f locator as: String))
    ifFalse: [error: 'Unable to delete this file.'].
].

f@(File traits) renameTo: newName
[
  f ensureClosed.
  (f renameFileNamed: (f locator as: String) to: (newName as: String))
    ifTrue: [f locator := newName as: f locator]
    ifFalse: [error: 'Unable to rename this file.']
].

f1@(File traits) with: f2@(File traits) sessionDo: block &mode1 &mode2 &mode
"Same as sessionDo, but works with two files.
If &mode is defined then this mode will be used for both files."
[
  mode ifNotNil: [ mode1 := mode. mode2 := mode ].
  f1 sessionDo:
    [| :file1 |
      f2 sessionDo:
    [| :file2 |
      block applyWith: file1 with: file2
        ] &mode: mode2
    ] &mode: mode1
].

f@(File traits) withOpenNamed: filename do: block &mode
"Calls sessionDo: on a File made for the given filename and mode."
[
  (f newNamed: filename) sessionDo: block &mode: mode
].

f@(File traits) exists
"Answer whether the file as specified by its locator already exists.
If it's already open, it exists; otherwise try to open it and then close it
if the result is successful. Then answer whether it worked."
[
  f fileInfo isNotNil
].

f@(File traits) checkExists
"Raise a NotFound condition if the file as specified by its locator does not
already exist.
If it's already open, it exists; otherwise try to open it and then close it
if the result is successful."
[
  oldMode ::= f mode.
  f isOpen \/
    [[[f mode := f Read. f open] on: f ConnectionFailed do: [| :c | f notFound]]
       ensure: [f isOpen ifTrue: [f close]. f mode := oldMode]]
].

file1@(File traits) hasSameContentsAs: file2@(File traits)
"Check for the exact same contents, using a quick file size check first to
be cheap."
[
  file1 size = file2 size
    /\ [[file1 reader with: file2 reader do:
      [| :char1 :char2 | char1 = char2 ifFalse: [^ False]]]
        on: Stream Exhaustion do: [| :c | ^ False]. True]
].

file1@(File traits) copyContentsTo: file2@(File traits)
[
  file1 reader >> file2 writer.
  file1
].

file@(File traits) copyContentsTo: s@(Sequence traits)
"TODO: rename this method to something more appropriate to what it does."
[
  result ::= s new &capacity: file size.
  file sessionDo: [| :f | f reader next: file size putInto: result].
  result
].

File traits define: #NotFound &parents: {ExternalResource ConnectionFailed}.

f@(File traits) connectionFailure
[f notFound].

f@(File traits) notFound
[(f NotFound cloneSettingSlots: #{#resource} to: {f}) signal].

f@(File traits) noneExistsFor: filename
[(f NotFound cloneSettingSlots: #{#resource} to: {f newNamed: filename}) signal].

e@(File NotFound traits) describeOn: out
[
  out ; 'A file does not exist for the pathname: '
   ; e resource locator printString.
].

File NotFound traits define: #CreateFile &parents: {Restart}.

r@(File NotFound CreateFile traits) describeOn: out
[out ; 'Create a file with the given name.\n'].

r@(File NotFound CreateFile traits) defaultHandler
[
  r condition resource `cache locator ensureExists.
  r condition resource create.
].

File NotFound traits define: #SpecifyAnotherLocation &parents: {Restart} &slots: {#newLocator}.

r@(File NotFound SpecifyAnotherLocation traits) describeOn: out
[out ; 'Select a new pathname and retry opening the file\n'].

r@(File NotFound SpecifyAnotherLocation traits) queryFrom: d
[
  d console ; 'Specify a new pathname to try to open: '.
  r newLocator: (r condition resource Locator readFrom: d parser next).
  "TODO: Avoid the parser since a Slate literal string is inconvenient."
].

r@(File NotFound SpecifyAnotherLocation traits) defaultHandler
[
  oldLocator ::= r condition resource `cache locator.
  r condition resource locator := r newLocator.
  [r condition resource open]
    on: File NotFound do:
      [| :c | c exit. "r condition resource locator := oldLocator."
       r condition signal]
].

File traits define: #Locator &parents: {ExternalResource Locator} 
&slots: {
#path -> ExtensibleArray new.
"The Sequence of path accessors (directory names) to reach the file's area."
#name -> ''.
"The name of a file(-group)."
#fileType.
"Corresponds to the filetype or suffix used in many filesystems."
#version.
"Corresponds to the version of a file, with optional support."
#host.
"The storage system or logical host of the file."
#device.
"The logical or physical device hosting the file. (optional)"
}.

File locator := File Locator.

l@(File Locator traits) type
"So a Locator knows it's for a File and not a Directory."
[File].

s@(String traits) as: l@(File Locator traits)
[l readFrom: s].

l@(File Locator traits) copy
[
  l cloneSettingSlots: #{#path. #name. #fileType. #version}
    to: {l path copy. l name copy. l fileType copy. l version copy}
].

l@(File Locator traits) / name@(String traits)
[
  l copy `>> [path := l path copyWith: name. ]
].

l@(File Locator traits) / names@(Sequence traits)
[
  l copy `>> [path := l path ; names. ]
].

f1@(File Locator traits) = f2@(File Locator traits)
[f1 name = f2 name /\ [f1 path = f2 path] /\ [f1 fileType = f2 fileType]
   /\ [f1 version = f2 version]].

l@(File Locator traits) new &capacity: n
[
  l cloneSettingSlots: #{#path. #name. #fileType. #version}
    to: {l path new &capacity: n. Nil. Nil. Nil}
].

l@(File Locator traits) baseName
"Performs the same function as POSIX basename(), answering the last element
of the path or the filename itself if not empty/Nil."
[
  l name isNotNil /\ [l name isEmpty not]
    ifTrue: [l name] ifFalse: [l path last]
].

l@(File Locator traits) openFile &mode
[
  (File newNamed: l &mode: mode) open
].

l@(File Locator traits) sessionDo: block &mode
"Calls the block with the File object as input, opening and closing it
transparently in an error-tolerant way. The return value of the block is
answered if it completes without error."
"NOTE: This cannot protect the case where the handle is created but an error
occurs before it can be assigned to the #file slot."
[
  [file ::= l openFile &mode: mode.
   block applyWith: file]
     ensure:
       [file ifNotNil: [file close]]
].

l1@(File Locator traits) with: l2@(File Locator traits) sessionDo: block &mode1 &mode2 &mode
"Same as sessionDo, but works with two files.
If &mode is defined then this mode will be used for both files."
[
  mode ifNotNil: [mode1 := mode. mode2 := mode].
  l1 sessionDo:
    [| :file1 |
     l2 sessionDo:
       [| :file2 |
    block apply*, file1, file2] &mode: mode2] &mode: mode1
].

File Locator traits define: #hostSeparator -> $:.
File Locator traits define: #pathSeparator -> $/.

File traits define: #AbsoluteLocator &parents: {File Locator}.

s@(String traits) as: l@(File AbsoluteLocator traits)
"Parses the String representation of a path into an actual File Locator object;
this will assume the current platform's naming scheme."
[
  endHostPart ::= s indexOf: l hostSeparator ifAbsent: [-1].
  l new `>>
    [| :newL |
     host := s copyFrom: 0 to: endHostPart.
     path := (s sliceFrom: endHostPart + 1) splitWith: l pathSeparator.
     (s last = l pathSeparator) ifFalse: [newL path removeLast].
     name := s last = l pathSeparator
       ifTrue: ['']
       ifFalse: [s copyFrom:
           (s lastIndexOf: l pathSeparator ifAbsent: [-1]) + 1
           to: s indexLast]. ]
].

l@(File Locator traits) as: _@(File Locator traits) [l].

File Locator traits define: #parentString -> '..'.
File Locator traits define: #hereString -> '.'.
File Locator traits define: #homeString -> '~'.
File Locator traits define: #dot -> $. .

File traits define: #RelativeLocator &parents: {File Locator} &slots: {#basePath -> File Locator}.
"A path taken relative to an existing one, which may be another RelativeLocator
but ultimately must be based on an AbsoluteLocator."

"The basis of the path. The other slots are treated as overrides of any
information in that path, except the #path which is appended to the path of
the basePath."

f1@(File RelativeLocator traits) = f2@(File RelativeLocator traits)
[f1 name = f2 name /\ [f1 basePath = f2 basePath] /\ [f1 path = f2 path] 
   /\ [f1 fileType = f2 fileType] /\ [f1 version = f2 version]].

s@(String traits) as: l@(File RelativeLocator traits) &base
[
  base `defaultsTo: Directory Current.
  resend `>> [basePath := base. ]
].

l@(File RelativeLocator traits) newFrom: base
[l cloneSettingSlots: #{#basePath} to: {base}].

l@(File Locator traits) readFrom: src &pathSeparator
[
  src := src reader. "Should be a PositionableStream."
  pathSeparator `defaultsTo: l pathSeparator.
  firstPart ::= src upToAnyOf: ':\\/'.
  src retract. "Position just before the first one found."
  src isAtEnd not /\ [src peek = l hostSeparator]
    ifTrue:
      [src next.
       firstPart size = 1 /\ [firstPart first isLetter]
     "Windows-style path detection, detects a drive letter:"
     ifTrue: [(l readFrom: src upToEnd &pathSeparator: $\\)
            `>> [device := firstPart. ]]
     "It's a hostname. Read the rest from scratch."
     ifFalse: [(l readFrom: src upToEnd) `>> [host := firstPart. ]]]
    ifFalse: "Now detect initial relativity of location or a hostname."
      [(({l hereString. l parentString. l homeString} includes:
    firstPart)
    ifTrue: [l type RelativeLocator newFrom: (firstPart caseOf:
      {l hereString -> [Directory Current].
       l parentString -> [Directory Current parent].
       l homeString -> [Directory Home]})]
    ifFalse:
      [firstPart isEmpty
         "Nothing before \ or / - means it is absolute."
         ifTrue: [l type AbsoluteLocator clone]
         "Implicitly relative to the current directory."
         ifFalse: [src reset.
               l type RelativeLocator newFrom: Directory Current]])
     "Now read the sequence of Path elements into it."
     `>> [readPathElementsFrom: src &pathSeparator: pathSeparator. ]]
].

l@(File Locator traits) readPathElementsFrom: s &pathSeparator
[
  pathSeparator `defaultsTo: l pathSeparator.
  pathElements ::= s upToEnd splitWith: pathSeparator.
  l path := pathElements allButLast.
  pathElements isEmpty ifFalse: [l readFilenameFrom: pathElements last].
].

l@(File Locator traits) readFilenameFrom: s
[
  l name := s copyUpToLast: l dot.
  (s lastIndexOf: l dot) ifNotNil: [l fileType := s copyAfterLast: l dot].
].

l@(File Locator traits) isRoot
"Whether this describes the Root path or an entry within it."
[l path isEmpty \/ [l path size = 1 /\ [l path first isEmpty]]].

l@(File RelativeLocator traits) isRoot
"Relative locators can never be root."
[resend /\ [l basePath isRoot]].

l@(File Locator traits) reduce
"Eliminate uses of . and .. in the path Sequence."
[| curIndex |
  "First, remove all . entries."
  [(curIndex := l path indexOf: l hereString) isNotNil] whileTrue:
    [l path removeAt: curIndex].
  "Now, remove all non-initial .. entries and those that precede them."
  "Find the first non-.. entry."
  (curIndex := l path indexOfFirstSatisfying: #(~= l parentString) `er)
    ifNotNil:
      [[(curIndex := l path indexOf: l parentString startingAt: curIndex)
          isNotNil]
         whileTrue: [l path removeAt: curIndex. l path removeAt: curIndex - 1]].
  l
].

l@(File RelativeLocator traits) reduce
"Go one step further than the generic Locator reduce by manually re-adjusting
the basePath by climbing up the number of parents as there are initial ..
entries in the path."
[
  resend.
  (l path indexOfFirstSatisfying: #(~= l parentString) `er)
    ifNotNilDo: [| :numParents |
      numParents isPositive
        ifTrue: [l basePath := l basePath locator copy. l basePath path removeLast: numParents].
      l path removeFirst: numParents].
  l
].

l@(File Locator traits) writeDeviceOrHostOn: s
[
  l device
    ifNil: [l host ifNotNil: [s ; l host. s nextPut: l hostSeparator]]
    ifNotNil: [s ; l device. s nextPut: l hostSeparator].
].

l@(File Locator traits) writeNameVersionTypeOn: s
[
  l name ifNotNil: [s ; l name].
  l version ifNotNil: [s ; l hereString ; l version printString].
  l fileType ifNotNil: [s ; l hereString ; l fileType].
].

l@(File Locator traits) as: s@(String traits) &pathSeparator &relativeTo: basePath
[
  l device ifNotNil: [pathSeparator := $\\].
  pathSeparator `defaultsTo: l pathSeparator.
  [| :s |
   l writeDeviceOrHostOn: s.
   l path do: [| :each | s ; each. s nextPut: pathSeparator].
   l writeNameVersionTypeOn: s] writingAs: s
].

l@(File RelativeLocator traits) as: s@(String traits) &pathSeparator &relativeTo: basePath
[
  l device ifNotNil: [pathSeparator := $\\].
  pathSeparator `defaultsTo: l pathSeparator.
  basePath `defaultsTo: Directory current.
  [| :s |
   l writeDeviceOrHostOn: s.
   l basePath ifNotNilDo:
     [| :base | base locator ifNotNilDo:
        [| :locator | locator = Directory current locator ifFalse:
           [s ; (locator as: String &pathSeparator: pathSeparator &relativeTo: basePath)]]].
   l path do: [| :each | s ; each. s nextPut: pathSeparator].
   l writeNameVersionTypeOn: s] writingAs: s
].

l@(File AbsoluteLocator traits) as: s@(String traits) &pathSeparator &relativeTo: basePath
[
  l device ifNotNil: [pathSeparator := $\\].
  pathSeparator `defaultsTo: l pathSeparator.
  basePath `defaultsTo: Directory root.
  [| :s |
   l writeDeviceOrHostOn: s.
   s nextPut: pathSeparator.
   l isRoot ifFalse:
     [l path do: [| :each | s ; each. s nextPut: pathSeparator]].
   l writeNameVersionTypeOn: s] writingAs: s
].

l@(File Locator traits) printOn: s &relativeTo: basePath
"Print out (each/path/element)/name.version.fileType."
[
  s ; 'p\'' ; (l as: String &relativeTo: basePath) escaped ; '\''
].

l@(File Locator traits) newChildNamed: name
[l copy `>> [path addLast: name. ]].

"File traits define: #Stream
        &parents: {ExternalResource ReadWriteStream. PositionableStream}.
File Stream removeSlot: #position."

"fix: this is a hack (i.e. problem with parent linearization) to make sure we know that
ExternalResource Stream is a more significant trait than PositionableStream but we need
both in the chain. The #on: function needs to resolve first to ExternalResource Stream."

File traits define: #Stream &parents: {ExternalResource ReadWriteStream. ExternalResource ReadStream. ExternalResource WriteStream. ExternalResource Stream. PositionableStream}.
File Stream removeSlot: #position.
File traits define: #ReadStream &parents: {File Stream}.
File traits define: #WriteStream &parents: {File Stream}.
File traits define: #ReadWriteStream &parents: {File Stream}.

File traits define: #ASCIIStream &parents: {File Stream}.
File traits define: #ASCIIReadStream &parents: {File ReadStream}.
File traits define: #ASCIIWriteStream &parents: {File WriteStream}.
File traits define: #ASCIIReadWriteStream &parents: {File ReadWriteStream}.
fs@(File ASCIIStream traits) elementType [ASCIIString Character].
fs@(File ASCIIStream traits) collectionType [ASCIIString].
fs@(File ASCIIReadStream traits) elementType [ASCIIString Character].
fs@(File ASCIIReadStream traits) collectionType [ASCIIString].
fs@(File ASCIIWriteStream traits) elementType [ASCIIString Character].
fs@(File ASCIIWriteStream traits) collectionType [ASCIIString].
fs@(File ASCIIReadWriteStream traits) elementType [ASCIIString Character].
fs@(File ASCIIReadWriteStream traits) collectionType [ASCIIString].


fs@(File Stream traits) on: target@(String traits)
"Open a File ReadWriteStream on the String path."
[
   fs on: (File newNamed: target &mode: File ReadWrite) open
].

fs@(File ReadStream traits) on: target@(String traits)
"Open a File ReadStream on the String path."
[
   fs on: (File newNamed: target &mode: File Read) open
].

fs@(File WriteStream traits) on: target@(String traits)
"Open a File WriteStream on the String path."
[
   fs on: (File newNamed: target &mode: File Write) open
].

fs@(File ReadWriteStream traits) on: target@(String traits)
"Open a File ReadWriteStream on the String path."
[
   fs on: (File newNamed: target &mode: File ReadWrite) open
].

fs@(File Stream traits) elementType
[Integer].

fs@(File Stream traits) collectionType
[
  ByteArray
].

fs@(File Stream traits) position
[fs resource position].

fs@(File Stream traits) position: index
[fs resource position := index].

fs@(File Stream traits) isAtEnd
[fs resource isAtEnd].

fs@(File Stream traits) peekForwardBy: offset
"Saves the original position and moves forward by the given offset and then
restores before answering the element found."
[
  ((origPos ::= fs position) + offset between: 0 and: fs resource size)
    ifFalse: [error: 'Beyond the end of the file.'].
  fs position := origPos + offset - 1.
  elem ::= fs next.
  fs position := origPos.
  elem
].

fs@(File Stream traits) contents
"Get everything from the file at once, preserving the current position in the
file."
[
  pos ::= fs position.
  fs position := 0.
  s ::= fs next: fs resource size.
  fs position := pos.
  s
].

f@(File traits) contents
[
  f sessionDo: [| :in size result |
    size := f size.
    result := String newSize: size.
    (in read: size into: result).
    result
  ]
].

fs@(File Stream traits) file
[fs resource].

File traits define: #Info &parents: {Cloneable} &slots: {#data -> Array new}.

l@(File Info traits) newNamed: locator
[
  (File informationForFileNamed: (locator as: String))
    ifNotNilDo: [| :data | l clone `>> [data := data. ]]
].

l@(File Locator traits) exists
[
  l fileInfo isNotNil
].

l@(File Locator traits) fileInfo
[
  File Info newNamed: l
].

f@(File traits) fileInfo
[
  f Info newNamed: f locator
].

i@(File Info traits) fileSize
[
  i data first
].

i@(File Info traits) accessTimestamp
[
  i data second
].

i@(File Info traits) modificationTimestamp
[
  i data third
].

i@(File Info traits) creationTimestamp
[
  i data fourth
].

"We express the bitmask checks in octal to verify against stat.h"

i@(File Info traits) typeBits
[
  i data last bitAnd: 8r0170000
].

i@(File Info traits) isFile
[
  i typeBits = 8r100000
].

i@(File Info traits) isDirectory
[
  i typeBits = 8r040000
].

i@(File Info traits) isLink
[
  i typeBits = 8r120000
].

i@(File Info traits) isFIFO
[
  i typeBits = 8r010000
].

i@(File Info traits) isCharacterDevice
[
  i typeBits = 8r020000
].

i@(File Info traits) isBlockDevice
[
  i typeBits = 8r060000
].

i@(File Info traits) isSocket
[
  i typeBits = 8r140000
].

i@(File Info traits) accessBits
[
  i data last bitAnd: 8r777
].
