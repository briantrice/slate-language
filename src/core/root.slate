"NOTE: Contains forward references to IdentitySet and ExtensibleArray."

"Core object functionality." (

x@(Root traits) = y@(Root traits)
"Object equality; this should generally be overridden for each type that has
some value semantics in its slots. When overriding this, also override the
hash method for the kind of object, since hashing and equality testing are
bound together for many container types."
"The default equality is object identity."
[x == y].

x@(Root traits) ~== y@(Root traits)
"Whether the objects are not identical."
[(x == y) not].

x@(Root traits) ~= y@(Root traits)
"Whether the objects are not equal."
[(x = y) not].

x@(Root traits) hash
"The default hash value is the identity-based hash."
[x identityHash].

x@(Root traits) shallowCopy
"A cloning is a shallow copy. This is a Smalltalk idiom and may not be
necessary for Slate, or may not be worth overriding."
[x clone].

x@(Root traits) copy
"Copy should return a new object which is = to the argument. The default is
to return a clone. This should be overridden based on ='s overrides."
[x shallowCopy].

x@(Root traits) new
"New should return a new object which is 'fresh', meaning that it has some
default appropriate state or lack-of-state. The default is to return a clone.
This should be overridden whenever state is extended."
[x clone].

).

x@(Root traits) hasSlotNamed: slotName
"Whether there is a slot defined with the given Symbol name on the object."
[x slotNames identityIncludes: slotName].

x@(Root traits) hasDelegate: object
[x _delegates identityIncludes: object].

x@(Root traits) accessorNameFor: slotName
"Answer the default name for a Method to access the value of this slot;
by default the slotName itself."
[slotName].

x@(Root traits) mutatorNameFor: slotName
"Answer the default name for a Method to access the value of this slot;
by default the slotName appended with a colon."
[| mutatorName nameString index |
  nameString := slotName name.
  mutatorName := nameString newSize: nameString size + 1.
  index := 0.
  [index = nameString size]
    whileFalse:
      [mutatorName at: index put: (nameString at: index).
       index += 1].
  mutatorName at: index put: $:.
  intern: mutatorName
].

x@(Root traits) defaultSlotValue
"The default value for new slots for this object."
[Nil].

x@(Root traits) addAccessor: method for: slotName &accessorName
[
  method
    asAccessor: (accessorName ifNil: [x accessorNameFor: slotName])
    for: slotName on: {x}
].

x@(Root traits) addAccessorFor: slotName &accessorName
"Adds and answers a new Method for accessing the slot's value,
with overridable selector."
[| m regCount slotNameReg primNumReg resultReg |
"  x addAccessor: #(atSlotNamed: slotName) `er
    for: slotName &accessorName: accessorName"
  "bypass method lookup by calling the primitive directly.
   because this is only defined on Root traits, we don't have to worry about the separate smallint primitive.
   now we just need to inline this into the caller to drop the interpreter_apply_to cost"
  m := [| :obj | ] clone.
  m environment := Nil. "this should not be a closure"
  regCount := m registerCount.
  slotNameReg := regCount.
  primNumReg := regCount + 1.
  resultReg := regCount + 2.
  m registerCount += 3.
  m code := {#[VM SSACode loadLiteral]. slotNameReg. slotName.
             #[VM SSACode loadLiteral]. primNumReg. 13.
             #[VM SSACode primitiveDo]. primNumReg. 2. resultReg. 0. slotNameReg.  "primNum, arg count, result reg, args..."
             #[VM SSACode returnRegister]. resultReg}.
  x addAccessor: m
    for: slotName &accessorName: accessorName
].

x@(Root traits) addMutator: method for: slotName &mutatorName
[
  method
    asAccessor: (mutatorName ifNil: [x mutatorNameFor: slotName])
    for: slotName on: {x. NoRole}
].

x@(Root traits) addMutatorFor: slotName &mutatorName
"Adds and answers a new Method for changing the slot's value,
with overridable selector."
[| m regCount slotNameReg primNumReg resultReg |
  "bypass method lookup by calling the primitive directly.
   now we just need to inline this into the caller to drop the interpreter_apply_to cost"
  m := [| :obj :val | ] clone.
  m environment := Nil. "this should not be a closure"
  regCount := m registerCount.
  slotNameReg := regCount.
  primNumReg := regCount + 1.
  resultReg := regCount + 2.
  m registerCount += 3.
  m code := {#[VM SSACode loadLiteral]. slotNameReg. slotName.
             #[VM SSACode loadLiteral]. primNumReg. 15.
             #[VM SSACode primitiveDo]. primNumReg. 3. resultReg. 0. slotNameReg. 1.  "primNum, arg count, result reg, args..."
             #[VM SSACode returnRegister]. resultReg}.
  x addMutator: m
    for: slotName &mutatorName: mutatorName
].

x@(Root traits) rawAddSlot: slotName valued: slotValue
[| newObj |
  newObj := x cloneWithSlot: slotName valued: slotValue.
  x forwardTo: newObj
].

x@(Root traits) addImmutableSlot: slotName valued: slotValue
[
  (x hasSlotNamed: slotName)
    ifTrue: [x atSlotNamed: slotName put: slotValue]
    ifFalse: [x rawAddSlot: slotName valued: slotValue.
          x addAccessorFor: slotName.
          slotValue]
].

x@(Root traits) bind: slotName to: slotValue
[
  (x hasSlotNamed: slotName)
    ifTrue: [x rebindOf: slotName]
    ifFalse: [x rawAddSlot: slotName valued: slotValue.
              (slotName findOn: {x}) ifNil: [x addAccessorFor: slotName].
              slotValue]
].

x@(Root traits) addSlot: slotName valued: slotValue
[
  x addImmutableSlot: slotName valued: slotValue.
  x addMutatorFor: slotName.
  slotValue
].

x@(Root traits) addSlot: slotName
"Adds a slot with default value, unless the slot is already present."
[
  (x hasSlotNamed: slotName)
    ifTrue: [x atSlotNamed: slotName]
    ifFalse: [x addSlot: slotName valued: x defaultSlotValue]
].

x@(Root traits) addImmutableSlot: slotName
"Adds a slot with default value, unless the slot is already present."
[
  (x hasSlotNamed: slotName)
    ifTrue: [x atSlotNamed: slotName]
    ifFalse: [x addImmutableSlot: slotName valued: x defaultSlotValue]
].

x@(Root traits) addDelegate: slotValue
[| newObj newDelegates |
  newDelegates := x _delegates copyWith: slotValue.
  x _delegates := newDelegates.
  x
].

x@(Root traits) insertDelegate: slotValue
[| newObj newDelegates i |
  newDelegates := Array newSize: x _delegates size + 1.
  i := 0.
  [i = x _delegates size] whileFalse:
    [newDelegates at: i + 1 put: (x _delegates at: i). i += 1].
  newDelegates at: 0 put: slotValue.
  x _delegates := newDelegates.
  x
].

x@(Root traits) removeMutator: slotName
[
  ((x mutatorNameFor: slotName) findOn: {x. NoRole})
    ifNotNilDo: [| :mutator |
      mutator removeFrom: {x. NoRole}].
].

x@(Root traits) addInvisibleSlot: slotName valued: slotValue
"Adds a slot without any accessors, returning the value used."
[
  x rawAddSlot: slotName valued: slotValue.
  x removeMutator: slotName.
  slotValue
].

x@(Root traits) removeSlot: slotName
[| newObj |
  ((x accessorNameFor: slotName) findOn: {x})
    ifNotNilDo: [| :accessor |
      accessor removeFrom: {x}].
  ((x mutatorNameFor: slotName) findOn: {x. NoRole})
    ifNotNilDo: [| :mutator |
      mutator removeFrom: {x. NoRole}].
  newObj := x cloneWithoutSlot: slotName.
  x forwardTo: newObj
].

x@(Root traits) defaultDelegate
"The default to delegate to; this should really not be used often."
[Nil].

x@(Root traits) restrictDelegation
"Sets the flag that marks this object->traits relationship as base-to-meta
and therefore where to stop on method lookup. The map is replaced since we
do not want to modify siblings in this way."
[
  x _map := x _map clone.
  x _map flags := x _map flags bitOr: 1.
  x
].

x@(Root traits) cloneWithUpdates: slotsValuesArray
"Wrapper of cloneSettingSlots:to: to take an array of Associations."
[
  x cloneSettingSlots: (slotsValuesArray collect: #key `er)
    to: (slotsValuesArray collect: #value `er)
].

x@(Root traits) addSlots: col
"Adds slots for all the names in the collection."
[
  col do: #(x addSlot: _) `er.
  x
].

x@(Root traits) addSlotsFrom: another
"Adds all slots from the other object to the first, with their values."
"TODO: ensure it adds the accessor methods."
[
  another slotNames do:
    [| :slotName |
     (x hasSlotNamed: slotName)
       ifFalse: [x addSlotNamed: slotName from: another]].
  x
].

x@(Root traits) addSlotsFromRecursively: another &seen
"Copies the subtree of all slots from the second argument to the first,
using a seen-Set to avoid multiple visits."
[
  (seen `defaultsTo: IdentitySet new)
    include: x.
  another slotNames do:
    [| :slotName |
     (x hasSlotNamed: slotName)
       ifTrue:
     [| obj |
      (seen identityIncludes: (obj := x atSlotNamed: slotName))
        ifFalse:
          [seen include: obj.
           obj addSlotsFromRecursively: (another atSlotNamed: slotName)
           &seen: seen]]
       ifFalse: [x addSlotNamed: slotName from: another]].
  x
].

o@Nil addSlotsFromRecursively: _ [o].
o addSlotsFromRecursively: _@Nil [o].

n@(SmallInteger traits) addSlotsFromRecursively: another [n].

x@(Root traits) addSlotNamed: slotName from: another
[
  x addSlot: slotName valued: (another atSlotNamed: slotName)
].

x@(Root traits) addSlotsNamed: slotNames from: another
"Add the slots with the given names from the other object to the first, with
their values."
"TODO: ensure that slot properties are carried over"
[| otherSlotNames |
  otherSlotNames := another slotNames.
  slotNames
    do: [| :slotName |
     (anotherSlotNames identityIncludes: slotName)
       ifTrue: [x addSlotNamed: slotName from: another]].
  x
].

x@(Root traits) moveSlotNamed: slotName to: another
"Adds the slot with the given name to the other object from the first, removing
it then from the first."
[
  (x hasSlotNamed: slotName)
    ifFalse: [x slotNotFoundNamed: slotName].
  another addSlotNamed: slotName from: x.
].

x@(Root traits) aliasSlotNamed: slotName as: another
"Create accessor/mutator fake methods which access and update an existing slot,
but using an interface that suggests that the slot is named differently."
"TODO: Carry over mutability? Support aliasing to other objects."
[
  x addAccessorFor: slotName &accessorName: (x accessorNameFor: another).
  x addMutatorFor: slotName &mutatorName: (x mutatorNameFor: another).
  x
].

x@(Root traits) renameSlot: slotName to: newName
"Replaces the slot with a slot having the new name and the same value."
[| slotValue |
  (x hasSlotNamed: slotName)
    ifFalse: [x slotNotFoundNamed: slotName].
  slotValue := x atSlotNamed: slotName.
  x removeSlot: slotName.
  x addSlot: newName valued: slotValue
].

x@(Root traits) ensureSlot: slotName is: newValue unlessSatisfies: testBlock
"Adds a slot of the given name to the object if one isn't present already,
initializing the new slot to the value. If a slot with that name is present
already, test the existing one via the comparison block, and only update the
slot if it fails. This always returns the resulting value of the slot."
[
  (x hasSlotNamed: slotName)
    ifTrue: [| oldValue |
         oldValue := x atSlotNamed: slotName.
         (testBlock applyWith: oldValue)
        ifTrue: [oldValue]
        ifFalse: [x atSlotNamed: slotName put: newValue. newValue]]
    ifFalse: [x addSlot: slotName valued: newValue. newValue]
].

x@(Root traits) ensureSlot: slotName is: newValue
"Adds a slot of the given name to the object if one isn't present already,
initializing the new slot to the value. If a slot with that name is present
already, compare the newValue with the existing one via =, and only update
the slot if they're not equal. This always returns the resulting value of
the slot."
[
  x ensureSlot: slotName is: newValue
    unlessSatisfies: #(= newValue) `er
].

x@(Root traits) slotNamesAndValuesDo: block
[
  x slotNames do:
    [| :slotName | block applyWith: slotName with: (x atSlotNamed: slotName)]
].

x@(Root traits) slotValuesDo: block
"Apply the code to all the objects stored in the given one's slots."
[
  x slotNames do: [| :slotName | block applyWith: (x atSlotNamed: slotName)]
].

x@(Root traits) slotValues
[x slotNames collect: #(x atSlotNamed: _) `er].

x@(Root traits) delegatesDo: block
"Apply the code to all the immediately delegated objects."
[
  x _delegates do: #(block applyWith: _) `er
].

x@(Root traits) allDelegates &seen
"Answer all delegates recursively through the delegation chains, avoiding
duplicates."
[
  seen `defaultsTo: IdentitySet new.
  x delegatesDo:
    [| :delegate |
      (seen identityIncludes: delegate)
        ifFalse: [seen include: delegate.
          delegate allDelegates &seen: seen]].
  seen
].

x@(Root traits) allSlotsDo: block &seen
"Apply the block to all slot values recursively through the slot chains,
avoiding circularity and duplicates."
[
  seen `defaultsTo: IdentitySet new.
  x slotValuesDo:
    [| :obj |
      (seen identityIncludes: obj)
        ifFalse: [seen include: obj.
          block applyWith: obj.
          obj allSlotsDo: block &seen: seen]].
].

x@(Root traits) allDelegatesDo: block &seen
"Recurse through the delegation chains, applying the block to each,
avoiding circularity and duplicates."
[
  seen `defaultsTo: IdentitySet new.
  x delegatesDo: [| :each |
    (seen identityIncludes: each)
      ifFalse:
    [seen include: each.
     block applyWith: each.
     each allDelegatesDo: block &seen: seen]].
].

x@(Root traits) allSlotsAndDelegatesDo: block &seen
[
  seen `defaultsTo: IdentitySet new.
  x slotValues ; x _delegates do:
    [| :obj |
     (seen identityIncludes: obj)
       ifFalse: [seen include: obj.
         block applyWith: obj.
         obj allSlotsAndDelegatesDo: block &seen: seen]].
].

x isSameAs: y@(Root traits)
"Answer whether the two objects have the exact same shared behavior."
[x traits == y traits].

x@(Root traits) commonAncestorWith: y@(Root traits)
"Search for a common ancestor."
[| yts |
  (x isSameAs: y) ifTrue: [^ x traits].
  yts := y allDelegates.
  x traits
    allDelegatesDo:
      [| :xt |
        (yts identityIncludes: xt)
          ifTrue: [^ xt]].
  Nil
].

x isReally: y@(Root traits)
"Determine if anything in x's delegation chains equals y's traits.
Do not override this."
[| yt |
  yt := y traits.
  x traits == yt
    \/ [x allDelegatesDo:
      [| :each | each == yt ifTrue: [^ True]].
    False]
].

x is: y@(Root traits)
"The default for the protocol for testing properties. This is `blessed' to
be overridden for optimization of queries and such."
[x isReally: y].

x as: y@(Root traits)
"The default conversion method, as: returns a new object based on x which is
as much like y as possible. If they are clone-family similar, just return the
original object. Otherwise, the default is to raise a continuable Condition."
[
  (x isSameAs: y)
    ifTrue: [x]
    ifFalse: [x conversionNotFoundTo: y]
].

x to: y@(Root traits)
"The default attempt-conversion method, to: calls as: but in case of error
just returns the source object."
[
  [x as: y]
    on: ConversionNotFound
    do: [| :c | c return: c source]
].

"fix: make sure this works with non-named delegate model"
x@(Root traits) addDynamicSlot: slotName valued: val
"This creates a `dynamic slot', which means an immutable delegated slot
that can be overridden from its default per object, making an effective
customization policy.
It works by ensuring that the object has a slot of that name with that value,
and finally defining a mutator method on it to define a new slot on the
*receiver* when mutations are attempted."
[
  x addImmutableSlot: slotName valued: val.
  [| :obj :val | obj addSlot: slotName valued: val]
    asMethod: (x mutatorNameFor: slotName)
    on: {x. NoRole}.
  x
].

"fix: make sure this works with non-named delegate model"
x@(Root traits) addLazySlot: slotName initializer: init
"If the created slot is Nil then the accessor will call the init
body and assign the returned value to the slot."
[| newObj |
  newObj := x cloneWithSlot: slotName valued: x defaultSlotValue.
  [| :obj :val |
   obj addAccessorFor: slotName.
   obj addMutatorFor: slotName.
   obj atSlotNamed: slotName put: val]
    asAccessor: (x mutatorNameFor: slotName)
    for: slotName
    on: {newObj. NoRole}.
  [| :obj |
   obj addAccessorFor: slotName.
   obj addMutatorFor: slotName.
   obj atSlotNamed: slotName put: (init apply*, obj)]
    asAccessor: (x accessorNameFor: slotName)
    for: slotName
    on: {newObj}.
  x forwardTo: newObj
].

x@(Oddball traits) clone
[x == Oddball
  ifTrue: [#clone sendTo: {x} through: {Cloneable}]
  ifFalse: [shouldNotImplement]
].

x@(Oddball traits) copy
"While Oddballs are cloneable, copying shouldn't respect that."
[x].

x@(Oddball traits) shallowCopy
"While Oddballs are cloneable, copying shouldn't respect that."
[x].
